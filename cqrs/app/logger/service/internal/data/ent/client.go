// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"kratos-cqrs/app/logger/service/internal/data/ent/migrate"

	"kratos-cqrs/app/logger/service/internal/data/ent/sensor"
	"kratos-cqrs/app/logger/service/internal/data/ent/sensordata"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Sensor is the client for interacting with the Sensor builders.
	Sensor *SensorClient
	// SensorData is the client for interacting with the SensorData builders.
	SensorData *SensorDataClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Sensor = NewSensorClient(c.config)
	c.SensorData = NewSensorDataClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Sensor:     NewSensorClient(cfg),
		SensorData: NewSensorDataClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:     cfg,
		Sensor:     NewSensorClient(cfg),
		SensorData: NewSensorDataClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Sensor.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Sensor.Use(hooks...)
	c.SensorData.Use(hooks...)
}

// SensorClient is a client for the Sensor schema.
type SensorClient struct {
	config
}

// NewSensorClient returns a client for the Sensor from the given config.
func NewSensorClient(c config) *SensorClient {
	return &SensorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sensor.Hooks(f(g(h())))`.
func (c *SensorClient) Use(hooks ...Hook) {
	c.hooks.Sensor = append(c.hooks.Sensor, hooks...)
}

// Create returns a create builder for Sensor.
func (c *SensorClient) Create() *SensorCreate {
	mutation := newSensorMutation(c.config, OpCreate)
	return &SensorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Sensor entities.
func (c *SensorClient) CreateBulk(builders ...*SensorCreate) *SensorCreateBulk {
	return &SensorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Sensor.
func (c *SensorClient) Update() *SensorUpdate {
	mutation := newSensorMutation(c.config, OpUpdate)
	return &SensorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SensorClient) UpdateOne(s *Sensor) *SensorUpdateOne {
	mutation := newSensorMutation(c.config, OpUpdateOne, withSensor(s))
	return &SensorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SensorClient) UpdateOneID(id int64) *SensorUpdateOne {
	mutation := newSensorMutation(c.config, OpUpdateOne, withSensorID(id))
	return &SensorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Sensor.
func (c *SensorClient) Delete() *SensorDelete {
	mutation := newSensorMutation(c.config, OpDelete)
	return &SensorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SensorClient) DeleteOne(s *Sensor) *SensorDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SensorClient) DeleteOneID(id int64) *SensorDeleteOne {
	builder := c.Delete().Where(sensor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SensorDeleteOne{builder}
}

// Query returns a query builder for Sensor.
func (c *SensorClient) Query() *SensorQuery {
	return &SensorQuery{
		config: c.config,
	}
}

// Get returns a Sensor entity by its id.
func (c *SensorClient) Get(ctx context.Context, id int64) (*Sensor, error) {
	return c.Query().Where(sensor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SensorClient) GetX(ctx context.Context, id int64) *Sensor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SensorClient) Hooks() []Hook {
	return c.hooks.Sensor
}

// SensorDataClient is a client for the SensorData schema.
type SensorDataClient struct {
	config
}

// NewSensorDataClient returns a client for the SensorData from the given config.
func NewSensorDataClient(c config) *SensorDataClient {
	return &SensorDataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sensordata.Hooks(f(g(h())))`.
func (c *SensorDataClient) Use(hooks ...Hook) {
	c.hooks.SensorData = append(c.hooks.SensorData, hooks...)
}

// Create returns a create builder for SensorData.
func (c *SensorDataClient) Create() *SensorDataCreate {
	mutation := newSensorDataMutation(c.config, OpCreate)
	return &SensorDataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SensorData entities.
func (c *SensorDataClient) CreateBulk(builders ...*SensorDataCreate) *SensorDataCreateBulk {
	return &SensorDataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SensorData.
func (c *SensorDataClient) Update() *SensorDataUpdate {
	mutation := newSensorDataMutation(c.config, OpUpdate)
	return &SensorDataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SensorDataClient) UpdateOne(sd *SensorData) *SensorDataUpdateOne {
	mutation := newSensorDataMutation(c.config, OpUpdateOne, withSensorData(sd))
	return &SensorDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SensorDataClient) UpdateOneID(id int) *SensorDataUpdateOne {
	mutation := newSensorDataMutation(c.config, OpUpdateOne, withSensorDataID(id))
	return &SensorDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SensorData.
func (c *SensorDataClient) Delete() *SensorDataDelete {
	mutation := newSensorDataMutation(c.config, OpDelete)
	return &SensorDataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SensorDataClient) DeleteOne(sd *SensorData) *SensorDataDeleteOne {
	return c.DeleteOneID(sd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SensorDataClient) DeleteOneID(id int) *SensorDataDeleteOne {
	builder := c.Delete().Where(sensordata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SensorDataDeleteOne{builder}
}

// Query returns a query builder for SensorData.
func (c *SensorDataClient) Query() *SensorDataQuery {
	return &SensorDataQuery{
		config: c.config,
	}
}

// Get returns a SensorData entity by its id.
func (c *SensorDataClient) Get(ctx context.Context, id int) (*SensorData, error) {
	return c.Query().Where(sensordata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SensorDataClient) GetX(ctx context.Context, id int) *SensorData {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SensorDataClient) Hooks() []Hook {
	return c.hooks.SensorData
}
