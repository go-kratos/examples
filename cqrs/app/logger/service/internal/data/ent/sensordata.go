// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"kratos-cqrs/app/logger/service/internal/data/ent/sensordata"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// SensorData is the model entity for the SensorData schema.
type SensorData struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Time holds the value of the "time" field.
	// 时间戳
	Time *int64 `json:"time,omitempty"`
	// SensorID holds the value of the "sensor_id" field.
	// 传感器ID
	SensorID int `json:"sensor_id,omitempty"`
	// Temperature holds the value of the "temperature" field.
	// 温度
	Temperature float64 `json:"temperature,omitempty"`
	// CPU holds the value of the "cpu" field.
	// CPU使用率
	CPU float64 `json:"cpu,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SensorData) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case sensordata.FieldTemperature, sensordata.FieldCPU:
			values[i] = new(sql.NullFloat64)
		case sensordata.FieldID, sensordata.FieldTime, sensordata.FieldSensorID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SensorData", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SensorData fields.
func (sd *SensorData) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sensordata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sd.ID = int(value.Int64)
		case sensordata.FieldTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				sd.Time = new(int64)
				*sd.Time = value.Int64
			}
		case sensordata.FieldSensorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sensor_id", values[i])
			} else if value.Valid {
				sd.SensorID = int(value.Int64)
			}
		case sensordata.FieldTemperature:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field temperature", values[i])
			} else if value.Valid {
				sd.Temperature = value.Float64
			}
		case sensordata.FieldCPU:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cpu", values[i])
			} else if value.Valid {
				sd.CPU = value.Float64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this SensorData.
// Note that you need to call SensorData.Unwrap() before calling this method if this SensorData
// was returned from a transaction, and the transaction was committed or rolled back.
func (sd *SensorData) Update() *SensorDataUpdateOne {
	return (&SensorDataClient{config: sd.config}).UpdateOne(sd)
}

// Unwrap unwraps the SensorData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sd *SensorData) Unwrap() *SensorData {
	tx, ok := sd.config.driver.(*txDriver)
	if !ok {
		panic("ent: SensorData is not a transactional entity")
	}
	sd.config.driver = tx.drv
	return sd
}

// String implements the fmt.Stringer.
func (sd *SensorData) String() string {
	var builder strings.Builder
	builder.WriteString("SensorData(")
	builder.WriteString(fmt.Sprintf("id=%v", sd.ID))
	if v := sd.Time; v != nil {
		builder.WriteString(", time=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", sensor_id=")
	builder.WriteString(fmt.Sprintf("%v", sd.SensorID))
	builder.WriteString(", temperature=")
	builder.WriteString(fmt.Sprintf("%v", sd.Temperature))
	builder.WriteString(", cpu=")
	builder.WriteString(fmt.Sprintf("%v", sd.CPU))
	builder.WriteByte(')')
	return builder.String()
}

// SensorDataSlice is a parsable slice of SensorData.
type SensorDataSlice []*SensorData

func (sd SensorDataSlice) config(cfg config) {
	for _i := range sd {
		sd[_i].config = cfg
	}
}
