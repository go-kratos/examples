// Code generated by entc, DO NOT EDIT.

package sensordata

import (
	"kratos-cqrs/app/logger/service/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Time applies equality check predicate on the "time" field. It's identical to TimeEQ.
func Time(v int64) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTime), v))
	})
}

// SensorID applies equality check predicate on the "sensor_id" field. It's identical to SensorIDEQ.
func SensorID(v int) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSensorID), v))
	})
}

// Temperature applies equality check predicate on the "temperature" field. It's identical to TemperatureEQ.
func Temperature(v float64) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTemperature), v))
	})
}

// CPU applies equality check predicate on the "cpu" field. It's identical to CPUEQ.
func CPU(v float64) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCPU), v))
	})
}

// TimeEQ applies the EQ predicate on the "time" field.
func TimeEQ(v int64) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTime), v))
	})
}

// TimeNEQ applies the NEQ predicate on the "time" field.
func TimeNEQ(v int64) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTime), v))
	})
}

// TimeIn applies the In predicate on the "time" field.
func TimeIn(vs ...int64) predicate.SensorData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SensorData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTime), v...))
	})
}

// TimeNotIn applies the NotIn predicate on the "time" field.
func TimeNotIn(vs ...int64) predicate.SensorData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SensorData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTime), v...))
	})
}

// TimeGT applies the GT predicate on the "time" field.
func TimeGT(v int64) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTime), v))
	})
}

// TimeGTE applies the GTE predicate on the "time" field.
func TimeGTE(v int64) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTime), v))
	})
}

// TimeLT applies the LT predicate on the "time" field.
func TimeLT(v int64) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTime), v))
	})
}

// TimeLTE applies the LTE predicate on the "time" field.
func TimeLTE(v int64) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTime), v))
	})
}

// TimeIsNil applies the IsNil predicate on the "time" field.
func TimeIsNil() predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTime)))
	})
}

// TimeNotNil applies the NotNil predicate on the "time" field.
func TimeNotNil() predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTime)))
	})
}

// SensorIDEQ applies the EQ predicate on the "sensor_id" field.
func SensorIDEQ(v int) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSensorID), v))
	})
}

// SensorIDNEQ applies the NEQ predicate on the "sensor_id" field.
func SensorIDNEQ(v int) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSensorID), v))
	})
}

// SensorIDIn applies the In predicate on the "sensor_id" field.
func SensorIDIn(vs ...int) predicate.SensorData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SensorData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSensorID), v...))
	})
}

// SensorIDNotIn applies the NotIn predicate on the "sensor_id" field.
func SensorIDNotIn(vs ...int) predicate.SensorData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SensorData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSensorID), v...))
	})
}

// SensorIDGT applies the GT predicate on the "sensor_id" field.
func SensorIDGT(v int) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSensorID), v))
	})
}

// SensorIDGTE applies the GTE predicate on the "sensor_id" field.
func SensorIDGTE(v int) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSensorID), v))
	})
}

// SensorIDLT applies the LT predicate on the "sensor_id" field.
func SensorIDLT(v int) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSensorID), v))
	})
}

// SensorIDLTE applies the LTE predicate on the "sensor_id" field.
func SensorIDLTE(v int) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSensorID), v))
	})
}

// TemperatureEQ applies the EQ predicate on the "temperature" field.
func TemperatureEQ(v float64) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTemperature), v))
	})
}

// TemperatureNEQ applies the NEQ predicate on the "temperature" field.
func TemperatureNEQ(v float64) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTemperature), v))
	})
}

// TemperatureIn applies the In predicate on the "temperature" field.
func TemperatureIn(vs ...float64) predicate.SensorData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SensorData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTemperature), v...))
	})
}

// TemperatureNotIn applies the NotIn predicate on the "temperature" field.
func TemperatureNotIn(vs ...float64) predicate.SensorData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SensorData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTemperature), v...))
	})
}

// TemperatureGT applies the GT predicate on the "temperature" field.
func TemperatureGT(v float64) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTemperature), v))
	})
}

// TemperatureGTE applies the GTE predicate on the "temperature" field.
func TemperatureGTE(v float64) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTemperature), v))
	})
}

// TemperatureLT applies the LT predicate on the "temperature" field.
func TemperatureLT(v float64) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTemperature), v))
	})
}

// TemperatureLTE applies the LTE predicate on the "temperature" field.
func TemperatureLTE(v float64) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTemperature), v))
	})
}

// CPUEQ applies the EQ predicate on the "cpu" field.
func CPUEQ(v float64) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCPU), v))
	})
}

// CPUNEQ applies the NEQ predicate on the "cpu" field.
func CPUNEQ(v float64) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCPU), v))
	})
}

// CPUIn applies the In predicate on the "cpu" field.
func CPUIn(vs ...float64) predicate.SensorData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SensorData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCPU), v...))
	})
}

// CPUNotIn applies the NotIn predicate on the "cpu" field.
func CPUNotIn(vs ...float64) predicate.SensorData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SensorData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCPU), v...))
	})
}

// CPUGT applies the GT predicate on the "cpu" field.
func CPUGT(v float64) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCPU), v))
	})
}

// CPUGTE applies the GTE predicate on the "cpu" field.
func CPUGTE(v float64) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCPU), v))
	})
}

// CPULT applies the LT predicate on the "cpu" field.
func CPULT(v float64) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCPU), v))
	})
}

// CPULTE applies the LTE predicate on the "cpu" field.
func CPULTE(v float64) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCPU), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SensorData) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SensorData) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SensorData) predicate.SensorData {
	return predicate.SensorData(func(s *sql.Selector) {
		p(s.Not())
	})
}
