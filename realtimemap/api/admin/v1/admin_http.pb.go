// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.20.2
// source: admin.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAdminGetGeofences = "/admin.v1.Admin/GetGeofences"
const OperationAdminGetOrganizations = "/admin.v1.Admin/GetOrganizations"
const OperationAdminGetPositionsHistory = "/admin.v1.Admin/GetPositionsHistory"

type AdminHTTPServer interface {
	GetGeofences(context.Context, *GetGeofencesReq) (*GetGetGeofencesReply, error)
	GetOrganizations(context.Context, *emptypb.Empty) (*GetOrganizationsReply, error)
	GetPositionsHistory(context.Context, *GetPositionsHistoryReq) (*GetPositionsHistoryReply, error)
}

func RegisterAdminHTTPServer(s *http.Server, srv AdminHTTPServer) {
	r := s.Route("/")
	r.GET("/api/organization", _Admin_GetOrganizations0_HTTP_Handler(srv))
	r.GET("/api/organization/{org_id}", _Admin_GetGeofences0_HTTP_Handler(srv))
	r.GET("/api/trail/{id}", _Admin_GetPositionsHistory0_HTTP_Handler(srv))
}

func _Admin_GetOrganizations0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetOrganizations)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOrganizations(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetOrganizationsReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetGeofences0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGeofencesReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetGeofences)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGeofences(ctx, req.(*GetGeofencesReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetGetGeofencesReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetPositionsHistory0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPositionsHistoryReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetPositionsHistory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPositionsHistory(ctx, req.(*GetPositionsHistoryReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPositionsHistoryReply)
		return ctx.Result(200, reply)
	}
}

type AdminHTTPClient interface {
	GetGeofences(ctx context.Context, req *GetGeofencesReq, opts ...http.CallOption) (rsp *GetGetGeofencesReply, err error)
	GetOrganizations(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetOrganizationsReply, err error)
	GetPositionsHistory(ctx context.Context, req *GetPositionsHistoryReq, opts ...http.CallOption) (rsp *GetPositionsHistoryReply, err error)
}

type AdminHTTPClientImpl struct {
	cc *http.Client
}

func NewAdminHTTPClient(client *http.Client) AdminHTTPClient {
	return &AdminHTTPClientImpl{client}
}

func (c *AdminHTTPClientImpl) GetGeofences(ctx context.Context, in *GetGeofencesReq, opts ...http.CallOption) (*GetGetGeofencesReply, error) {
	var out GetGetGeofencesReply
	pattern := "/api/organization/{org_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetGeofences))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetOrganizations(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetOrganizationsReply, error) {
	var out GetOrganizationsReply
	pattern := "/api/organization"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetOrganizations))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetPositionsHistory(ctx context.Context, in *GetPositionsHistoryReq, opts ...http.CallOption) (*GetPositionsHistoryReply, error) {
	var out GetPositionsHistoryReply
	pattern := "/api/trail/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetPositionsHistory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
