// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: system/service/v1/dict_detail.proto

package servicev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DictDetail with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DictDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DictDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DictDetailMultiError, or
// nil if none found.
func (m *DictDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *DictDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.DictId != nil {
		// no validation rules for DictId
	}

	if m.OrderNo != nil {
		// no validation rules for OrderNo
	}

	if m.Label != nil {
		// no validation rules for Label
	}

	if m.Value != nil {
		// no validation rules for Value
	}

	if m.CreatorId != nil {
		// no validation rules for CreatorId
	}

	if m.CreatorName != nil {
		// no validation rules for CreatorName
	}

	if m.CreateTime != nil {
		// no validation rules for CreateTime
	}

	if m.UpdateTime != nil {
		// no validation rules for UpdateTime
	}

	if m.DeleteTime != nil {
		// no validation rules for DeleteTime
	}

	if len(errors) > 0 {
		return DictDetailMultiError(errors)
	}

	return nil
}

// DictDetailMultiError is an error wrapping multiple validation errors
// returned by DictDetail.ValidateAll() if the designated constraints aren't met.
type DictDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DictDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DictDetailMultiError) AllErrors() []error { return m }

// DictDetailValidationError is the validation error returned by
// DictDetail.Validate if the designated constraints aren't met.
type DictDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DictDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DictDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DictDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DictDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DictDetailValidationError) ErrorName() string { return "DictDetailValidationError" }

// Error satisfies the builtin error interface
func (e DictDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDictDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DictDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DictDetailValidationError{}

// Validate checks the field values on ListDictDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDictDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDictDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDictDetailResponseMultiError, or nil if none found.
func (m *ListDictDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDictDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDictDetailResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDictDetailResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDictDetailResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListDictDetailResponseMultiError(errors)
	}

	return nil
}

// ListDictDetailResponseMultiError is an error wrapping multiple validation
// errors returned by ListDictDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDictDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDictDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDictDetailResponseMultiError) AllErrors() []error { return m }

// ListDictDetailResponseValidationError is the validation error returned by
// ListDictDetailResponse.Validate if the designated constraints aren't met.
type ListDictDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDictDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDictDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDictDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDictDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDictDetailResponseValidationError) ErrorName() string {
	return "ListDictDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDictDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDictDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDictDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDictDetailResponseValidationError{}

// Validate checks the field values on GetDictDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDictDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDictDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDictDetailRequestMultiError, or nil if none found.
func (m *GetDictDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDictDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.Code != nil {
		// no validation rules for Code
	}

	if len(errors) > 0 {
		return GetDictDetailRequestMultiError(errors)
	}

	return nil
}

// GetDictDetailRequestMultiError is an error wrapping multiple validation
// errors returned by GetDictDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDictDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDictDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDictDetailRequestMultiError) AllErrors() []error { return m }

// GetDictDetailRequestValidationError is the validation error returned by
// GetDictDetailRequest.Validate if the designated constraints aren't met.
type GetDictDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDictDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDictDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDictDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDictDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDictDetailRequestValidationError) ErrorName() string {
	return "GetDictDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDictDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDictDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDictDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDictDetailRequestValidationError{}

// Validate checks the field values on CreateDictDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDictDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDictDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDictDetailRequestMultiError, or nil if none found.
func (m *CreateDictDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDictDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDictDetailRequestValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDictDetailRequestValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDictDetailRequestValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.OperatorId != nil {
		// no validation rules for OperatorId
	}

	if len(errors) > 0 {
		return CreateDictDetailRequestMultiError(errors)
	}

	return nil
}

// CreateDictDetailRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDictDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDictDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDictDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDictDetailRequestMultiError) AllErrors() []error { return m }

// CreateDictDetailRequestValidationError is the validation error returned by
// CreateDictDetailRequest.Validate if the designated constraints aren't met.
type CreateDictDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDictDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDictDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDictDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDictDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDictDetailRequestValidationError) ErrorName() string {
	return "CreateDictDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDictDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDictDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDictDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDictDetailRequestValidationError{}

// Validate checks the field values on UpdateDictDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictDetailRequestMultiError, or nil if none found.
func (m *UpdateDictDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDictDetailRequestValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDictDetailRequestValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDictDetailRequestValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.OperatorId != nil {
		// no validation rules for OperatorId
	}

	if len(errors) > 0 {
		return UpdateDictDetailRequestMultiError(errors)
	}

	return nil
}

// UpdateDictDetailRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDictDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDictDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictDetailRequestMultiError) AllErrors() []error { return m }

// UpdateDictDetailRequestValidationError is the validation error returned by
// UpdateDictDetailRequest.Validate if the designated constraints aren't met.
type UpdateDictDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictDetailRequestValidationError) ErrorName() string {
	return "UpdateDictDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictDetailRequestValidationError{}

// Validate checks the field values on DeleteDictDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDictDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDictDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDictDetailRequestMultiError, or nil if none found.
func (m *DeleteDictDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDictDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.OperatorId != nil {
		// no validation rules for OperatorId
	}

	if len(errors) > 0 {
		return DeleteDictDetailRequestMultiError(errors)
	}

	return nil
}

// DeleteDictDetailRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDictDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDictDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDictDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDictDetailRequestMultiError) AllErrors() []error { return m }

// DeleteDictDetailRequestValidationError is the validation error returned by
// DeleteDictDetailRequest.Validate if the designated constraints aren't met.
type DeleteDictDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDictDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDictDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDictDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDictDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDictDetailRequestValidationError) ErrorName() string {
	return "DeleteDictDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDictDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDictDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDictDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDictDetailRequestValidationError{}
