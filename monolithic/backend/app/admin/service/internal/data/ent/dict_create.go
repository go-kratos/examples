// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-monolithic-demo/app/admin/service/internal/data/ent/dict"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DictCreate is the builder for creating a Dict entity.
type DictCreate struct {
	config
	mutation *DictMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (dc *DictCreate) SetCreateTime(t time.Time) *DictCreate {
	dc.mutation.SetCreateTime(t)
	return dc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (dc *DictCreate) SetNillableCreateTime(t *time.Time) *DictCreate {
	if t != nil {
		dc.SetCreateTime(*t)
	}
	return dc
}

// SetUpdateTime sets the "update_time" field.
func (dc *DictCreate) SetUpdateTime(t time.Time) *DictCreate {
	dc.mutation.SetUpdateTime(t)
	return dc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (dc *DictCreate) SetNillableUpdateTime(t *time.Time) *DictCreate {
	if t != nil {
		dc.SetUpdateTime(*t)
	}
	return dc
}

// SetDeleteTime sets the "delete_time" field.
func (dc *DictCreate) SetDeleteTime(t time.Time) *DictCreate {
	dc.mutation.SetDeleteTime(t)
	return dc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (dc *DictCreate) SetNillableDeleteTime(t *time.Time) *DictCreate {
	if t != nil {
		dc.SetDeleteTime(*t)
	}
	return dc
}

// SetCreateBy sets the "create_by" field.
func (dc *DictCreate) SetCreateBy(u uint32) *DictCreate {
	dc.mutation.SetCreateBy(u)
	return dc
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (dc *DictCreate) SetNillableCreateBy(u *uint32) *DictCreate {
	if u != nil {
		dc.SetCreateBy(*u)
	}
	return dc
}

// SetName sets the "name" field.
func (dc *DictCreate) SetName(s string) *DictCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (dc *DictCreate) SetNillableName(s *string) *DictCreate {
	if s != nil {
		dc.SetName(*s)
	}
	return dc
}

// SetDescription sets the "description" field.
func (dc *DictCreate) SetDescription(s string) *DictCreate {
	dc.mutation.SetDescription(s)
	return dc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dc *DictCreate) SetNillableDescription(s *string) *DictCreate {
	if s != nil {
		dc.SetDescription(*s)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DictCreate) SetID(u uint32) *DictCreate {
	dc.mutation.SetID(u)
	return dc
}

// Mutation returns the DictMutation object of the builder.
func (dc *DictCreate) Mutation() *DictMutation {
	return dc.mutation
}

// Save creates the Dict in the database.
func (dc *DictCreate) Save(ctx context.Context) (*Dict, error) {
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DictCreate) SaveX(ctx context.Context) *Dict {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DictCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DictCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DictCreate) check() error {
	if v, ok := dc.mutation.ID(); ok {
		if err := dict.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Dict.id": %w`, err)}
		}
	}
	return nil
}

func (dc *DictCreate) sqlSave(ctx context.Context) (*Dict, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DictCreate) createSpec() (*Dict, *sqlgraph.CreateSpec) {
	var (
		_node = &Dict{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(dict.Table, sqlgraph.NewFieldSpec(dict.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = dc.conflict
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.CreateTime(); ok {
		_spec.SetField(dict.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := dc.mutation.UpdateTime(); ok {
		_spec.SetField(dict.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = &value
	}
	if value, ok := dc.mutation.DeleteTime(); ok {
		_spec.SetField(dict.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = &value
	}
	if value, ok := dc.mutation.CreateBy(); ok {
		_spec.SetField(dict.FieldCreateBy, field.TypeUint32, value)
		_node.CreateBy = &value
	}
	if value, ok := dc.mutation.Name(); ok {
		_spec.SetField(dict.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := dc.mutation.Description(); ok {
		_spec.SetField(dict.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Dict.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DictUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (dc *DictCreate) OnConflict(opts ...sql.ConflictOption) *DictUpsertOne {
	dc.conflict = opts
	return &DictUpsertOne{
		create: dc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Dict.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dc *DictCreate) OnConflictColumns(columns ...string) *DictUpsertOne {
	dc.conflict = append(dc.conflict, sql.ConflictColumns(columns...))
	return &DictUpsertOne{
		create: dc,
	}
}

type (
	// DictUpsertOne is the builder for "upsert"-ing
	//  one Dict node.
	DictUpsertOne struct {
		create *DictCreate
	}

	// DictUpsert is the "OnConflict" setter.
	DictUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *DictUpsert) SetUpdateTime(v time.Time) *DictUpsert {
	u.Set(dict.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *DictUpsert) UpdateUpdateTime() *DictUpsert {
	u.SetExcluded(dict.FieldUpdateTime)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *DictUpsert) ClearUpdateTime() *DictUpsert {
	u.SetNull(dict.FieldUpdateTime)
	return u
}

// SetDeleteTime sets the "delete_time" field.
func (u *DictUpsert) SetDeleteTime(v time.Time) *DictUpsert {
	u.Set(dict.FieldDeleteTime, v)
	return u
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *DictUpsert) UpdateDeleteTime() *DictUpsert {
	u.SetExcluded(dict.FieldDeleteTime)
	return u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *DictUpsert) ClearDeleteTime() *DictUpsert {
	u.SetNull(dict.FieldDeleteTime)
	return u
}

// SetCreateBy sets the "create_by" field.
func (u *DictUpsert) SetCreateBy(v uint32) *DictUpsert {
	u.Set(dict.FieldCreateBy, v)
	return u
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *DictUpsert) UpdateCreateBy() *DictUpsert {
	u.SetExcluded(dict.FieldCreateBy)
	return u
}

// AddCreateBy adds v to the "create_by" field.
func (u *DictUpsert) AddCreateBy(v uint32) *DictUpsert {
	u.Add(dict.FieldCreateBy, v)
	return u
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *DictUpsert) ClearCreateBy() *DictUpsert {
	u.SetNull(dict.FieldCreateBy)
	return u
}

// SetName sets the "name" field.
func (u *DictUpsert) SetName(v string) *DictUpsert {
	u.Set(dict.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DictUpsert) UpdateName() *DictUpsert {
	u.SetExcluded(dict.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *DictUpsert) ClearName() *DictUpsert {
	u.SetNull(dict.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *DictUpsert) SetDescription(v string) *DictUpsert {
	u.Set(dict.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DictUpsert) UpdateDescription() *DictUpsert {
	u.SetExcluded(dict.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *DictUpsert) ClearDescription() *DictUpsert {
	u.SetNull(dict.FieldDescription)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Dict.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(dict.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DictUpsertOne) UpdateNewValues() *DictUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(dict.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(dict.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Dict.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DictUpsertOne) Ignore() *DictUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DictUpsertOne) DoNothing() *DictUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DictCreate.OnConflict
// documentation for more info.
func (u *DictUpsertOne) Update(set func(*DictUpsert)) *DictUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DictUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *DictUpsertOne) SetUpdateTime(v time.Time) *DictUpsertOne {
	return u.Update(func(s *DictUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *DictUpsertOne) UpdateUpdateTime() *DictUpsertOne {
	return u.Update(func(s *DictUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *DictUpsertOne) ClearUpdateTime() *DictUpsertOne {
	return u.Update(func(s *DictUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *DictUpsertOne) SetDeleteTime(v time.Time) *DictUpsertOne {
	return u.Update(func(s *DictUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *DictUpsertOne) UpdateDeleteTime() *DictUpsertOne {
	return u.Update(func(s *DictUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *DictUpsertOne) ClearDeleteTime() *DictUpsertOne {
	return u.Update(func(s *DictUpsert) {
		s.ClearDeleteTime()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *DictUpsertOne) SetCreateBy(v uint32) *DictUpsertOne {
	return u.Update(func(s *DictUpsert) {
		s.SetCreateBy(v)
	})
}

// AddCreateBy adds v to the "create_by" field.
func (u *DictUpsertOne) AddCreateBy(v uint32) *DictUpsertOne {
	return u.Update(func(s *DictUpsert) {
		s.AddCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *DictUpsertOne) UpdateCreateBy() *DictUpsertOne {
	return u.Update(func(s *DictUpsert) {
		s.UpdateCreateBy()
	})
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *DictUpsertOne) ClearCreateBy() *DictUpsertOne {
	return u.Update(func(s *DictUpsert) {
		s.ClearCreateBy()
	})
}

// SetName sets the "name" field.
func (u *DictUpsertOne) SetName(v string) *DictUpsertOne {
	return u.Update(func(s *DictUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DictUpsertOne) UpdateName() *DictUpsertOne {
	return u.Update(func(s *DictUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *DictUpsertOne) ClearName() *DictUpsertOne {
	return u.Update(func(s *DictUpsert) {
		s.ClearName()
	})
}

// SetDescription sets the "description" field.
func (u *DictUpsertOne) SetDescription(v string) *DictUpsertOne {
	return u.Update(func(s *DictUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DictUpsertOne) UpdateDescription() *DictUpsertOne {
	return u.Update(func(s *DictUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *DictUpsertOne) ClearDescription() *DictUpsertOne {
	return u.Update(func(s *DictUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *DictUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DictCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DictUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DictUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DictUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DictCreateBulk is the builder for creating many Dict entities in bulk.
type DictCreateBulk struct {
	config
	err      error
	builders []*DictCreate
	conflict []sql.ConflictOption
}

// Save creates the Dict entities in the database.
func (dcb *DictCreateBulk) Save(ctx context.Context) ([]*Dict, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Dict, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DictMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DictCreateBulk) SaveX(ctx context.Context) []*Dict {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DictCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DictCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Dict.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DictUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (dcb *DictCreateBulk) OnConflict(opts ...sql.ConflictOption) *DictUpsertBulk {
	dcb.conflict = opts
	return &DictUpsertBulk{
		create: dcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Dict.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dcb *DictCreateBulk) OnConflictColumns(columns ...string) *DictUpsertBulk {
	dcb.conflict = append(dcb.conflict, sql.ConflictColumns(columns...))
	return &DictUpsertBulk{
		create: dcb,
	}
}

// DictUpsertBulk is the builder for "upsert"-ing
// a bulk of Dict nodes.
type DictUpsertBulk struct {
	create *DictCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Dict.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(dict.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DictUpsertBulk) UpdateNewValues() *DictUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(dict.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(dict.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Dict.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DictUpsertBulk) Ignore() *DictUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DictUpsertBulk) DoNothing() *DictUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DictCreateBulk.OnConflict
// documentation for more info.
func (u *DictUpsertBulk) Update(set func(*DictUpsert)) *DictUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DictUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *DictUpsertBulk) SetUpdateTime(v time.Time) *DictUpsertBulk {
	return u.Update(func(s *DictUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *DictUpsertBulk) UpdateUpdateTime() *DictUpsertBulk {
	return u.Update(func(s *DictUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *DictUpsertBulk) ClearUpdateTime() *DictUpsertBulk {
	return u.Update(func(s *DictUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *DictUpsertBulk) SetDeleteTime(v time.Time) *DictUpsertBulk {
	return u.Update(func(s *DictUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *DictUpsertBulk) UpdateDeleteTime() *DictUpsertBulk {
	return u.Update(func(s *DictUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *DictUpsertBulk) ClearDeleteTime() *DictUpsertBulk {
	return u.Update(func(s *DictUpsert) {
		s.ClearDeleteTime()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *DictUpsertBulk) SetCreateBy(v uint32) *DictUpsertBulk {
	return u.Update(func(s *DictUpsert) {
		s.SetCreateBy(v)
	})
}

// AddCreateBy adds v to the "create_by" field.
func (u *DictUpsertBulk) AddCreateBy(v uint32) *DictUpsertBulk {
	return u.Update(func(s *DictUpsert) {
		s.AddCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *DictUpsertBulk) UpdateCreateBy() *DictUpsertBulk {
	return u.Update(func(s *DictUpsert) {
		s.UpdateCreateBy()
	})
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *DictUpsertBulk) ClearCreateBy() *DictUpsertBulk {
	return u.Update(func(s *DictUpsert) {
		s.ClearCreateBy()
	})
}

// SetName sets the "name" field.
func (u *DictUpsertBulk) SetName(v string) *DictUpsertBulk {
	return u.Update(func(s *DictUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DictUpsertBulk) UpdateName() *DictUpsertBulk {
	return u.Update(func(s *DictUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *DictUpsertBulk) ClearName() *DictUpsertBulk {
	return u.Update(func(s *DictUpsert) {
		s.ClearName()
	})
}

// SetDescription sets the "description" field.
func (u *DictUpsertBulk) SetDescription(v string) *DictUpsertBulk {
	return u.Update(func(s *DictUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *DictUpsertBulk) UpdateDescription() *DictUpsertBulk {
	return u.Update(func(s *DictUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *DictUpsertBulk) ClearDescription() *DictUpsertBulk {
	return u.Update(func(s *DictUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *DictUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DictCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DictCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DictUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
