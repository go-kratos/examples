// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-monolithic-demo/app/admin/service/internal/data/ent/dictdetail"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DictDetailCreate is the builder for creating a DictDetail entity.
type DictDetailCreate struct {
	config
	mutation *DictDetailMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (ddc *DictDetailCreate) SetCreateTime(t time.Time) *DictDetailCreate {
	ddc.mutation.SetCreateTime(t)
	return ddc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ddc *DictDetailCreate) SetNillableCreateTime(t *time.Time) *DictDetailCreate {
	if t != nil {
		ddc.SetCreateTime(*t)
	}
	return ddc
}

// SetUpdateTime sets the "update_time" field.
func (ddc *DictDetailCreate) SetUpdateTime(t time.Time) *DictDetailCreate {
	ddc.mutation.SetUpdateTime(t)
	return ddc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ddc *DictDetailCreate) SetNillableUpdateTime(t *time.Time) *DictDetailCreate {
	if t != nil {
		ddc.SetUpdateTime(*t)
	}
	return ddc
}

// SetDeleteTime sets the "delete_time" field.
func (ddc *DictDetailCreate) SetDeleteTime(t time.Time) *DictDetailCreate {
	ddc.mutation.SetDeleteTime(t)
	return ddc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ddc *DictDetailCreate) SetNillableDeleteTime(t *time.Time) *DictDetailCreate {
	if t != nil {
		ddc.SetDeleteTime(*t)
	}
	return ddc
}

// SetCreateBy sets the "create_by" field.
func (ddc *DictDetailCreate) SetCreateBy(u uint32) *DictDetailCreate {
	ddc.mutation.SetCreateBy(u)
	return ddc
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (ddc *DictDetailCreate) SetNillableCreateBy(u *uint32) *DictDetailCreate {
	if u != nil {
		ddc.SetCreateBy(*u)
	}
	return ddc
}

// SetDictID sets the "dict_id" field.
func (ddc *DictDetailCreate) SetDictID(u uint32) *DictDetailCreate {
	ddc.mutation.SetDictID(u)
	return ddc
}

// SetNillableDictID sets the "dict_id" field if the given value is not nil.
func (ddc *DictDetailCreate) SetNillableDictID(u *uint32) *DictDetailCreate {
	if u != nil {
		ddc.SetDictID(*u)
	}
	return ddc
}

// SetOrderNo sets the "order_no" field.
func (ddc *DictDetailCreate) SetOrderNo(i int32) *DictDetailCreate {
	ddc.mutation.SetOrderNo(i)
	return ddc
}

// SetNillableOrderNo sets the "order_no" field if the given value is not nil.
func (ddc *DictDetailCreate) SetNillableOrderNo(i *int32) *DictDetailCreate {
	if i != nil {
		ddc.SetOrderNo(*i)
	}
	return ddc
}

// SetLabel sets the "label" field.
func (ddc *DictDetailCreate) SetLabel(s string) *DictDetailCreate {
	ddc.mutation.SetLabel(s)
	return ddc
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (ddc *DictDetailCreate) SetNillableLabel(s *string) *DictDetailCreate {
	if s != nil {
		ddc.SetLabel(*s)
	}
	return ddc
}

// SetValue sets the "value" field.
func (ddc *DictDetailCreate) SetValue(s string) *DictDetailCreate {
	ddc.mutation.SetValue(s)
	return ddc
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (ddc *DictDetailCreate) SetNillableValue(s *string) *DictDetailCreate {
	if s != nil {
		ddc.SetValue(*s)
	}
	return ddc
}

// SetID sets the "id" field.
func (ddc *DictDetailCreate) SetID(u uint32) *DictDetailCreate {
	ddc.mutation.SetID(u)
	return ddc
}

// Mutation returns the DictDetailMutation object of the builder.
func (ddc *DictDetailCreate) Mutation() *DictDetailMutation {
	return ddc.mutation
}

// Save creates the DictDetail in the database.
func (ddc *DictDetailCreate) Save(ctx context.Context) (*DictDetail, error) {
	ddc.defaults()
	return withHooks(ctx, ddc.sqlSave, ddc.mutation, ddc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ddc *DictDetailCreate) SaveX(ctx context.Context) *DictDetail {
	v, err := ddc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ddc *DictDetailCreate) Exec(ctx context.Context) error {
	_, err := ddc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ddc *DictDetailCreate) ExecX(ctx context.Context) {
	if err := ddc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ddc *DictDetailCreate) defaults() {
	if _, ok := ddc.mutation.DictID(); !ok {
		v := dictdetail.DefaultDictID
		ddc.mutation.SetDictID(v)
	}
	if _, ok := ddc.mutation.OrderNo(); !ok {
		v := dictdetail.DefaultOrderNo
		ddc.mutation.SetOrderNo(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ddc *DictDetailCreate) check() error {
	if v, ok := ddc.mutation.ID(); ok {
		if err := dictdetail.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "DictDetail.id": %w`, err)}
		}
	}
	return nil
}

func (ddc *DictDetailCreate) sqlSave(ctx context.Context) (*DictDetail, error) {
	if err := ddc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ddc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ddc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	ddc.mutation.id = &_node.ID
	ddc.mutation.done = true
	return _node, nil
}

func (ddc *DictDetailCreate) createSpec() (*DictDetail, *sqlgraph.CreateSpec) {
	var (
		_node = &DictDetail{config: ddc.config}
		_spec = sqlgraph.NewCreateSpec(dictdetail.Table, sqlgraph.NewFieldSpec(dictdetail.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = ddc.conflict
	if id, ok := ddc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ddc.mutation.CreateTime(); ok {
		_spec.SetField(dictdetail.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := ddc.mutation.UpdateTime(); ok {
		_spec.SetField(dictdetail.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = &value
	}
	if value, ok := ddc.mutation.DeleteTime(); ok {
		_spec.SetField(dictdetail.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = &value
	}
	if value, ok := ddc.mutation.CreateBy(); ok {
		_spec.SetField(dictdetail.FieldCreateBy, field.TypeUint32, value)
		_node.CreateBy = &value
	}
	if value, ok := ddc.mutation.DictID(); ok {
		_spec.SetField(dictdetail.FieldDictID, field.TypeUint32, value)
		_node.DictID = &value
	}
	if value, ok := ddc.mutation.OrderNo(); ok {
		_spec.SetField(dictdetail.FieldOrderNo, field.TypeInt32, value)
		_node.OrderNo = &value
	}
	if value, ok := ddc.mutation.Label(); ok {
		_spec.SetField(dictdetail.FieldLabel, field.TypeString, value)
		_node.Label = &value
	}
	if value, ok := ddc.mutation.Value(); ok {
		_spec.SetField(dictdetail.FieldValue, field.TypeString, value)
		_node.Value = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DictDetail.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DictDetailUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (ddc *DictDetailCreate) OnConflict(opts ...sql.ConflictOption) *DictDetailUpsertOne {
	ddc.conflict = opts
	return &DictDetailUpsertOne{
		create: ddc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DictDetail.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ddc *DictDetailCreate) OnConflictColumns(columns ...string) *DictDetailUpsertOne {
	ddc.conflict = append(ddc.conflict, sql.ConflictColumns(columns...))
	return &DictDetailUpsertOne{
		create: ddc,
	}
}

type (
	// DictDetailUpsertOne is the builder for "upsert"-ing
	//  one DictDetail node.
	DictDetailUpsertOne struct {
		create *DictDetailCreate
	}

	// DictDetailUpsert is the "OnConflict" setter.
	DictDetailUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *DictDetailUpsert) SetUpdateTime(v time.Time) *DictDetailUpsert {
	u.Set(dictdetail.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *DictDetailUpsert) UpdateUpdateTime() *DictDetailUpsert {
	u.SetExcluded(dictdetail.FieldUpdateTime)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *DictDetailUpsert) ClearUpdateTime() *DictDetailUpsert {
	u.SetNull(dictdetail.FieldUpdateTime)
	return u
}

// SetDeleteTime sets the "delete_time" field.
func (u *DictDetailUpsert) SetDeleteTime(v time.Time) *DictDetailUpsert {
	u.Set(dictdetail.FieldDeleteTime, v)
	return u
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *DictDetailUpsert) UpdateDeleteTime() *DictDetailUpsert {
	u.SetExcluded(dictdetail.FieldDeleteTime)
	return u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *DictDetailUpsert) ClearDeleteTime() *DictDetailUpsert {
	u.SetNull(dictdetail.FieldDeleteTime)
	return u
}

// SetCreateBy sets the "create_by" field.
func (u *DictDetailUpsert) SetCreateBy(v uint32) *DictDetailUpsert {
	u.Set(dictdetail.FieldCreateBy, v)
	return u
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *DictDetailUpsert) UpdateCreateBy() *DictDetailUpsert {
	u.SetExcluded(dictdetail.FieldCreateBy)
	return u
}

// AddCreateBy adds v to the "create_by" field.
func (u *DictDetailUpsert) AddCreateBy(v uint32) *DictDetailUpsert {
	u.Add(dictdetail.FieldCreateBy, v)
	return u
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *DictDetailUpsert) ClearCreateBy() *DictDetailUpsert {
	u.SetNull(dictdetail.FieldCreateBy)
	return u
}

// SetDictID sets the "dict_id" field.
func (u *DictDetailUpsert) SetDictID(v uint32) *DictDetailUpsert {
	u.Set(dictdetail.FieldDictID, v)
	return u
}

// UpdateDictID sets the "dict_id" field to the value that was provided on create.
func (u *DictDetailUpsert) UpdateDictID() *DictDetailUpsert {
	u.SetExcluded(dictdetail.FieldDictID)
	return u
}

// AddDictID adds v to the "dict_id" field.
func (u *DictDetailUpsert) AddDictID(v uint32) *DictDetailUpsert {
	u.Add(dictdetail.FieldDictID, v)
	return u
}

// ClearDictID clears the value of the "dict_id" field.
func (u *DictDetailUpsert) ClearDictID() *DictDetailUpsert {
	u.SetNull(dictdetail.FieldDictID)
	return u
}

// SetOrderNo sets the "order_no" field.
func (u *DictDetailUpsert) SetOrderNo(v int32) *DictDetailUpsert {
	u.Set(dictdetail.FieldOrderNo, v)
	return u
}

// UpdateOrderNo sets the "order_no" field to the value that was provided on create.
func (u *DictDetailUpsert) UpdateOrderNo() *DictDetailUpsert {
	u.SetExcluded(dictdetail.FieldOrderNo)
	return u
}

// AddOrderNo adds v to the "order_no" field.
func (u *DictDetailUpsert) AddOrderNo(v int32) *DictDetailUpsert {
	u.Add(dictdetail.FieldOrderNo, v)
	return u
}

// ClearOrderNo clears the value of the "order_no" field.
func (u *DictDetailUpsert) ClearOrderNo() *DictDetailUpsert {
	u.SetNull(dictdetail.FieldOrderNo)
	return u
}

// SetLabel sets the "label" field.
func (u *DictDetailUpsert) SetLabel(v string) *DictDetailUpsert {
	u.Set(dictdetail.FieldLabel, v)
	return u
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *DictDetailUpsert) UpdateLabel() *DictDetailUpsert {
	u.SetExcluded(dictdetail.FieldLabel)
	return u
}

// ClearLabel clears the value of the "label" field.
func (u *DictDetailUpsert) ClearLabel() *DictDetailUpsert {
	u.SetNull(dictdetail.FieldLabel)
	return u
}

// SetValue sets the "value" field.
func (u *DictDetailUpsert) SetValue(v string) *DictDetailUpsert {
	u.Set(dictdetail.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *DictDetailUpsert) UpdateValue() *DictDetailUpsert {
	u.SetExcluded(dictdetail.FieldValue)
	return u
}

// ClearValue clears the value of the "value" field.
func (u *DictDetailUpsert) ClearValue() *DictDetailUpsert {
	u.SetNull(dictdetail.FieldValue)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DictDetail.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(dictdetail.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DictDetailUpsertOne) UpdateNewValues() *DictDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(dictdetail.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(dictdetail.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DictDetail.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DictDetailUpsertOne) Ignore() *DictDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DictDetailUpsertOne) DoNothing() *DictDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DictDetailCreate.OnConflict
// documentation for more info.
func (u *DictDetailUpsertOne) Update(set func(*DictDetailUpsert)) *DictDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DictDetailUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *DictDetailUpsertOne) SetUpdateTime(v time.Time) *DictDetailUpsertOne {
	return u.Update(func(s *DictDetailUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *DictDetailUpsertOne) UpdateUpdateTime() *DictDetailUpsertOne {
	return u.Update(func(s *DictDetailUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *DictDetailUpsertOne) ClearUpdateTime() *DictDetailUpsertOne {
	return u.Update(func(s *DictDetailUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *DictDetailUpsertOne) SetDeleteTime(v time.Time) *DictDetailUpsertOne {
	return u.Update(func(s *DictDetailUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *DictDetailUpsertOne) UpdateDeleteTime() *DictDetailUpsertOne {
	return u.Update(func(s *DictDetailUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *DictDetailUpsertOne) ClearDeleteTime() *DictDetailUpsertOne {
	return u.Update(func(s *DictDetailUpsert) {
		s.ClearDeleteTime()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *DictDetailUpsertOne) SetCreateBy(v uint32) *DictDetailUpsertOne {
	return u.Update(func(s *DictDetailUpsert) {
		s.SetCreateBy(v)
	})
}

// AddCreateBy adds v to the "create_by" field.
func (u *DictDetailUpsertOne) AddCreateBy(v uint32) *DictDetailUpsertOne {
	return u.Update(func(s *DictDetailUpsert) {
		s.AddCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *DictDetailUpsertOne) UpdateCreateBy() *DictDetailUpsertOne {
	return u.Update(func(s *DictDetailUpsert) {
		s.UpdateCreateBy()
	})
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *DictDetailUpsertOne) ClearCreateBy() *DictDetailUpsertOne {
	return u.Update(func(s *DictDetailUpsert) {
		s.ClearCreateBy()
	})
}

// SetDictID sets the "dict_id" field.
func (u *DictDetailUpsertOne) SetDictID(v uint32) *DictDetailUpsertOne {
	return u.Update(func(s *DictDetailUpsert) {
		s.SetDictID(v)
	})
}

// AddDictID adds v to the "dict_id" field.
func (u *DictDetailUpsertOne) AddDictID(v uint32) *DictDetailUpsertOne {
	return u.Update(func(s *DictDetailUpsert) {
		s.AddDictID(v)
	})
}

// UpdateDictID sets the "dict_id" field to the value that was provided on create.
func (u *DictDetailUpsertOne) UpdateDictID() *DictDetailUpsertOne {
	return u.Update(func(s *DictDetailUpsert) {
		s.UpdateDictID()
	})
}

// ClearDictID clears the value of the "dict_id" field.
func (u *DictDetailUpsertOne) ClearDictID() *DictDetailUpsertOne {
	return u.Update(func(s *DictDetailUpsert) {
		s.ClearDictID()
	})
}

// SetOrderNo sets the "order_no" field.
func (u *DictDetailUpsertOne) SetOrderNo(v int32) *DictDetailUpsertOne {
	return u.Update(func(s *DictDetailUpsert) {
		s.SetOrderNo(v)
	})
}

// AddOrderNo adds v to the "order_no" field.
func (u *DictDetailUpsertOne) AddOrderNo(v int32) *DictDetailUpsertOne {
	return u.Update(func(s *DictDetailUpsert) {
		s.AddOrderNo(v)
	})
}

// UpdateOrderNo sets the "order_no" field to the value that was provided on create.
func (u *DictDetailUpsertOne) UpdateOrderNo() *DictDetailUpsertOne {
	return u.Update(func(s *DictDetailUpsert) {
		s.UpdateOrderNo()
	})
}

// ClearOrderNo clears the value of the "order_no" field.
func (u *DictDetailUpsertOne) ClearOrderNo() *DictDetailUpsertOne {
	return u.Update(func(s *DictDetailUpsert) {
		s.ClearOrderNo()
	})
}

// SetLabel sets the "label" field.
func (u *DictDetailUpsertOne) SetLabel(v string) *DictDetailUpsertOne {
	return u.Update(func(s *DictDetailUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *DictDetailUpsertOne) UpdateLabel() *DictDetailUpsertOne {
	return u.Update(func(s *DictDetailUpsert) {
		s.UpdateLabel()
	})
}

// ClearLabel clears the value of the "label" field.
func (u *DictDetailUpsertOne) ClearLabel() *DictDetailUpsertOne {
	return u.Update(func(s *DictDetailUpsert) {
		s.ClearLabel()
	})
}

// SetValue sets the "value" field.
func (u *DictDetailUpsertOne) SetValue(v string) *DictDetailUpsertOne {
	return u.Update(func(s *DictDetailUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *DictDetailUpsertOne) UpdateValue() *DictDetailUpsertOne {
	return u.Update(func(s *DictDetailUpsert) {
		s.UpdateValue()
	})
}

// ClearValue clears the value of the "value" field.
func (u *DictDetailUpsertOne) ClearValue() *DictDetailUpsertOne {
	return u.Update(func(s *DictDetailUpsert) {
		s.ClearValue()
	})
}

// Exec executes the query.
func (u *DictDetailUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DictDetailCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DictDetailUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DictDetailUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DictDetailUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DictDetailCreateBulk is the builder for creating many DictDetail entities in bulk.
type DictDetailCreateBulk struct {
	config
	err      error
	builders []*DictDetailCreate
	conflict []sql.ConflictOption
}

// Save creates the DictDetail entities in the database.
func (ddcb *DictDetailCreateBulk) Save(ctx context.Context) ([]*DictDetail, error) {
	if ddcb.err != nil {
		return nil, ddcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ddcb.builders))
	nodes := make([]*DictDetail, len(ddcb.builders))
	mutators := make([]Mutator, len(ddcb.builders))
	for i := range ddcb.builders {
		func(i int, root context.Context) {
			builder := ddcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DictDetailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ddcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ddcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ddcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ddcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ddcb *DictDetailCreateBulk) SaveX(ctx context.Context) []*DictDetail {
	v, err := ddcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ddcb *DictDetailCreateBulk) Exec(ctx context.Context) error {
	_, err := ddcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ddcb *DictDetailCreateBulk) ExecX(ctx context.Context) {
	if err := ddcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DictDetail.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DictDetailUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (ddcb *DictDetailCreateBulk) OnConflict(opts ...sql.ConflictOption) *DictDetailUpsertBulk {
	ddcb.conflict = opts
	return &DictDetailUpsertBulk{
		create: ddcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DictDetail.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ddcb *DictDetailCreateBulk) OnConflictColumns(columns ...string) *DictDetailUpsertBulk {
	ddcb.conflict = append(ddcb.conflict, sql.ConflictColumns(columns...))
	return &DictDetailUpsertBulk{
		create: ddcb,
	}
}

// DictDetailUpsertBulk is the builder for "upsert"-ing
// a bulk of DictDetail nodes.
type DictDetailUpsertBulk struct {
	create *DictDetailCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DictDetail.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(dictdetail.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DictDetailUpsertBulk) UpdateNewValues() *DictDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(dictdetail.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(dictdetail.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DictDetail.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DictDetailUpsertBulk) Ignore() *DictDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DictDetailUpsertBulk) DoNothing() *DictDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DictDetailCreateBulk.OnConflict
// documentation for more info.
func (u *DictDetailUpsertBulk) Update(set func(*DictDetailUpsert)) *DictDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DictDetailUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *DictDetailUpsertBulk) SetUpdateTime(v time.Time) *DictDetailUpsertBulk {
	return u.Update(func(s *DictDetailUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *DictDetailUpsertBulk) UpdateUpdateTime() *DictDetailUpsertBulk {
	return u.Update(func(s *DictDetailUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *DictDetailUpsertBulk) ClearUpdateTime() *DictDetailUpsertBulk {
	return u.Update(func(s *DictDetailUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *DictDetailUpsertBulk) SetDeleteTime(v time.Time) *DictDetailUpsertBulk {
	return u.Update(func(s *DictDetailUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *DictDetailUpsertBulk) UpdateDeleteTime() *DictDetailUpsertBulk {
	return u.Update(func(s *DictDetailUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *DictDetailUpsertBulk) ClearDeleteTime() *DictDetailUpsertBulk {
	return u.Update(func(s *DictDetailUpsert) {
		s.ClearDeleteTime()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *DictDetailUpsertBulk) SetCreateBy(v uint32) *DictDetailUpsertBulk {
	return u.Update(func(s *DictDetailUpsert) {
		s.SetCreateBy(v)
	})
}

// AddCreateBy adds v to the "create_by" field.
func (u *DictDetailUpsertBulk) AddCreateBy(v uint32) *DictDetailUpsertBulk {
	return u.Update(func(s *DictDetailUpsert) {
		s.AddCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *DictDetailUpsertBulk) UpdateCreateBy() *DictDetailUpsertBulk {
	return u.Update(func(s *DictDetailUpsert) {
		s.UpdateCreateBy()
	})
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *DictDetailUpsertBulk) ClearCreateBy() *DictDetailUpsertBulk {
	return u.Update(func(s *DictDetailUpsert) {
		s.ClearCreateBy()
	})
}

// SetDictID sets the "dict_id" field.
func (u *DictDetailUpsertBulk) SetDictID(v uint32) *DictDetailUpsertBulk {
	return u.Update(func(s *DictDetailUpsert) {
		s.SetDictID(v)
	})
}

// AddDictID adds v to the "dict_id" field.
func (u *DictDetailUpsertBulk) AddDictID(v uint32) *DictDetailUpsertBulk {
	return u.Update(func(s *DictDetailUpsert) {
		s.AddDictID(v)
	})
}

// UpdateDictID sets the "dict_id" field to the value that was provided on create.
func (u *DictDetailUpsertBulk) UpdateDictID() *DictDetailUpsertBulk {
	return u.Update(func(s *DictDetailUpsert) {
		s.UpdateDictID()
	})
}

// ClearDictID clears the value of the "dict_id" field.
func (u *DictDetailUpsertBulk) ClearDictID() *DictDetailUpsertBulk {
	return u.Update(func(s *DictDetailUpsert) {
		s.ClearDictID()
	})
}

// SetOrderNo sets the "order_no" field.
func (u *DictDetailUpsertBulk) SetOrderNo(v int32) *DictDetailUpsertBulk {
	return u.Update(func(s *DictDetailUpsert) {
		s.SetOrderNo(v)
	})
}

// AddOrderNo adds v to the "order_no" field.
func (u *DictDetailUpsertBulk) AddOrderNo(v int32) *DictDetailUpsertBulk {
	return u.Update(func(s *DictDetailUpsert) {
		s.AddOrderNo(v)
	})
}

// UpdateOrderNo sets the "order_no" field to the value that was provided on create.
func (u *DictDetailUpsertBulk) UpdateOrderNo() *DictDetailUpsertBulk {
	return u.Update(func(s *DictDetailUpsert) {
		s.UpdateOrderNo()
	})
}

// ClearOrderNo clears the value of the "order_no" field.
func (u *DictDetailUpsertBulk) ClearOrderNo() *DictDetailUpsertBulk {
	return u.Update(func(s *DictDetailUpsert) {
		s.ClearOrderNo()
	})
}

// SetLabel sets the "label" field.
func (u *DictDetailUpsertBulk) SetLabel(v string) *DictDetailUpsertBulk {
	return u.Update(func(s *DictDetailUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *DictDetailUpsertBulk) UpdateLabel() *DictDetailUpsertBulk {
	return u.Update(func(s *DictDetailUpsert) {
		s.UpdateLabel()
	})
}

// ClearLabel clears the value of the "label" field.
func (u *DictDetailUpsertBulk) ClearLabel() *DictDetailUpsertBulk {
	return u.Update(func(s *DictDetailUpsert) {
		s.ClearLabel()
	})
}

// SetValue sets the "value" field.
func (u *DictDetailUpsertBulk) SetValue(v string) *DictDetailUpsertBulk {
	return u.Update(func(s *DictDetailUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *DictDetailUpsertBulk) UpdateValue() *DictDetailUpsertBulk {
	return u.Update(func(s *DictDetailUpsert) {
		s.UpdateValue()
	})
}

// ClearValue clears the value of the "value" field.
func (u *DictDetailUpsertBulk) ClearValue() *DictDetailUpsertBulk {
	return u.Update(func(s *DictDetailUpsert) {
		s.ClearValue()
	})
}

// Exec executes the query.
func (u *DictDetailUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DictDetailCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DictDetailCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DictDetailUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
