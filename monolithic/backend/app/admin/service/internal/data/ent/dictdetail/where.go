// Code generated by ent, DO NOT EDIT.

package dictdetail

import (
	"kratos-monolithic-demo/app/admin/service/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldEQ(FieldUpdateTime, v))
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v time.Time) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldEQ(FieldDeleteTime, v))
}

// CreateBy applies equality check predicate on the "create_by" field. It's identical to CreateByEQ.
func CreateBy(v uint32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldEQ(FieldCreateBy, v))
}

// DictID applies equality check predicate on the "dict_id" field. It's identical to DictIDEQ.
func DictID(v uint32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldEQ(FieldDictID, v))
}

// OrderNo applies equality check predicate on the "order_no" field. It's identical to OrderNoEQ.
func OrderNo(v int32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldEQ(FieldOrderNo, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v string) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldEQ(FieldValue, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldLTE(FieldCreateTime, v))
}

// CreateTimeIsNil applies the IsNil predicate on the "create_time" field.
func CreateTimeIsNil() predicate.DictDetail {
	return predicate.DictDetail(sql.FieldIsNull(FieldCreateTime))
}

// CreateTimeNotNil applies the NotNil predicate on the "create_time" field.
func CreateTimeNotNil() predicate.DictDetail {
	return predicate.DictDetail(sql.FieldNotNull(FieldCreateTime))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldLTE(FieldUpdateTime, v))
}

// UpdateTimeIsNil applies the IsNil predicate on the "update_time" field.
func UpdateTimeIsNil() predicate.DictDetail {
	return predicate.DictDetail(sql.FieldIsNull(FieldUpdateTime))
}

// UpdateTimeNotNil applies the NotNil predicate on the "update_time" field.
func UpdateTimeNotNil() predicate.DictDetail {
	return predicate.DictDetail(sql.FieldNotNull(FieldUpdateTime))
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v time.Time) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldEQ(FieldDeleteTime, v))
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v time.Time) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldNEQ(FieldDeleteTime, v))
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...time.Time) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldIn(FieldDeleteTime, vs...))
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...time.Time) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldNotIn(FieldDeleteTime, vs...))
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v time.Time) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldGT(FieldDeleteTime, v))
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v time.Time) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldGTE(FieldDeleteTime, v))
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v time.Time) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldLT(FieldDeleteTime, v))
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v time.Time) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldLTE(FieldDeleteTime, v))
}

// DeleteTimeIsNil applies the IsNil predicate on the "delete_time" field.
func DeleteTimeIsNil() predicate.DictDetail {
	return predicate.DictDetail(sql.FieldIsNull(FieldDeleteTime))
}

// DeleteTimeNotNil applies the NotNil predicate on the "delete_time" field.
func DeleteTimeNotNil() predicate.DictDetail {
	return predicate.DictDetail(sql.FieldNotNull(FieldDeleteTime))
}

// CreateByEQ applies the EQ predicate on the "create_by" field.
func CreateByEQ(v uint32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldEQ(FieldCreateBy, v))
}

// CreateByNEQ applies the NEQ predicate on the "create_by" field.
func CreateByNEQ(v uint32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldNEQ(FieldCreateBy, v))
}

// CreateByIn applies the In predicate on the "create_by" field.
func CreateByIn(vs ...uint32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldIn(FieldCreateBy, vs...))
}

// CreateByNotIn applies the NotIn predicate on the "create_by" field.
func CreateByNotIn(vs ...uint32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldNotIn(FieldCreateBy, vs...))
}

// CreateByGT applies the GT predicate on the "create_by" field.
func CreateByGT(v uint32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldGT(FieldCreateBy, v))
}

// CreateByGTE applies the GTE predicate on the "create_by" field.
func CreateByGTE(v uint32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldGTE(FieldCreateBy, v))
}

// CreateByLT applies the LT predicate on the "create_by" field.
func CreateByLT(v uint32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldLT(FieldCreateBy, v))
}

// CreateByLTE applies the LTE predicate on the "create_by" field.
func CreateByLTE(v uint32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldLTE(FieldCreateBy, v))
}

// CreateByIsNil applies the IsNil predicate on the "create_by" field.
func CreateByIsNil() predicate.DictDetail {
	return predicate.DictDetail(sql.FieldIsNull(FieldCreateBy))
}

// CreateByNotNil applies the NotNil predicate on the "create_by" field.
func CreateByNotNil() predicate.DictDetail {
	return predicate.DictDetail(sql.FieldNotNull(FieldCreateBy))
}

// DictIDEQ applies the EQ predicate on the "dict_id" field.
func DictIDEQ(v uint32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldEQ(FieldDictID, v))
}

// DictIDNEQ applies the NEQ predicate on the "dict_id" field.
func DictIDNEQ(v uint32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldNEQ(FieldDictID, v))
}

// DictIDIn applies the In predicate on the "dict_id" field.
func DictIDIn(vs ...uint32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldIn(FieldDictID, vs...))
}

// DictIDNotIn applies the NotIn predicate on the "dict_id" field.
func DictIDNotIn(vs ...uint32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldNotIn(FieldDictID, vs...))
}

// DictIDGT applies the GT predicate on the "dict_id" field.
func DictIDGT(v uint32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldGT(FieldDictID, v))
}

// DictIDGTE applies the GTE predicate on the "dict_id" field.
func DictIDGTE(v uint32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldGTE(FieldDictID, v))
}

// DictIDLT applies the LT predicate on the "dict_id" field.
func DictIDLT(v uint32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldLT(FieldDictID, v))
}

// DictIDLTE applies the LTE predicate on the "dict_id" field.
func DictIDLTE(v uint32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldLTE(FieldDictID, v))
}

// DictIDIsNil applies the IsNil predicate on the "dict_id" field.
func DictIDIsNil() predicate.DictDetail {
	return predicate.DictDetail(sql.FieldIsNull(FieldDictID))
}

// DictIDNotNil applies the NotNil predicate on the "dict_id" field.
func DictIDNotNil() predicate.DictDetail {
	return predicate.DictDetail(sql.FieldNotNull(FieldDictID))
}

// OrderNoEQ applies the EQ predicate on the "order_no" field.
func OrderNoEQ(v int32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldEQ(FieldOrderNo, v))
}

// OrderNoNEQ applies the NEQ predicate on the "order_no" field.
func OrderNoNEQ(v int32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldNEQ(FieldOrderNo, v))
}

// OrderNoIn applies the In predicate on the "order_no" field.
func OrderNoIn(vs ...int32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldIn(FieldOrderNo, vs...))
}

// OrderNoNotIn applies the NotIn predicate on the "order_no" field.
func OrderNoNotIn(vs ...int32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldNotIn(FieldOrderNo, vs...))
}

// OrderNoGT applies the GT predicate on the "order_no" field.
func OrderNoGT(v int32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldGT(FieldOrderNo, v))
}

// OrderNoGTE applies the GTE predicate on the "order_no" field.
func OrderNoGTE(v int32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldGTE(FieldOrderNo, v))
}

// OrderNoLT applies the LT predicate on the "order_no" field.
func OrderNoLT(v int32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldLT(FieldOrderNo, v))
}

// OrderNoLTE applies the LTE predicate on the "order_no" field.
func OrderNoLTE(v int32) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldLTE(FieldOrderNo, v))
}

// OrderNoIsNil applies the IsNil predicate on the "order_no" field.
func OrderNoIsNil() predicate.DictDetail {
	return predicate.DictDetail(sql.FieldIsNull(FieldOrderNo))
}

// OrderNoNotNil applies the NotNil predicate on the "order_no" field.
func OrderNoNotNil() predicate.DictDetail {
	return predicate.DictDetail(sql.FieldNotNull(FieldOrderNo))
}

// LabelEQ applies the EQ predicate on the "label" field.
func LabelEQ(v string) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldEQ(FieldLabel, v))
}

// LabelNEQ applies the NEQ predicate on the "label" field.
func LabelNEQ(v string) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldNEQ(FieldLabel, v))
}

// LabelIn applies the In predicate on the "label" field.
func LabelIn(vs ...string) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldIn(FieldLabel, vs...))
}

// LabelNotIn applies the NotIn predicate on the "label" field.
func LabelNotIn(vs ...string) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldNotIn(FieldLabel, vs...))
}

// LabelGT applies the GT predicate on the "label" field.
func LabelGT(v string) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldGT(FieldLabel, v))
}

// LabelGTE applies the GTE predicate on the "label" field.
func LabelGTE(v string) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldGTE(FieldLabel, v))
}

// LabelLT applies the LT predicate on the "label" field.
func LabelLT(v string) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldLT(FieldLabel, v))
}

// LabelLTE applies the LTE predicate on the "label" field.
func LabelLTE(v string) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldLTE(FieldLabel, v))
}

// LabelContains applies the Contains predicate on the "label" field.
func LabelContains(v string) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldContains(FieldLabel, v))
}

// LabelHasPrefix applies the HasPrefix predicate on the "label" field.
func LabelHasPrefix(v string) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldHasPrefix(FieldLabel, v))
}

// LabelHasSuffix applies the HasSuffix predicate on the "label" field.
func LabelHasSuffix(v string) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldHasSuffix(FieldLabel, v))
}

// LabelIsNil applies the IsNil predicate on the "label" field.
func LabelIsNil() predicate.DictDetail {
	return predicate.DictDetail(sql.FieldIsNull(FieldLabel))
}

// LabelNotNil applies the NotNil predicate on the "label" field.
func LabelNotNil() predicate.DictDetail {
	return predicate.DictDetail(sql.FieldNotNull(FieldLabel))
}

// LabelEqualFold applies the EqualFold predicate on the "label" field.
func LabelEqualFold(v string) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldEqualFold(FieldLabel, v))
}

// LabelContainsFold applies the ContainsFold predicate on the "label" field.
func LabelContainsFold(v string) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldContainsFold(FieldLabel, v))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v string) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v string) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...string) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...string) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v string) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v string) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v string) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v string) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldLTE(FieldValue, v))
}

// ValueContains applies the Contains predicate on the "value" field.
func ValueContains(v string) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldContains(FieldValue, v))
}

// ValueHasPrefix applies the HasPrefix predicate on the "value" field.
func ValueHasPrefix(v string) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldHasPrefix(FieldValue, v))
}

// ValueHasSuffix applies the HasSuffix predicate on the "value" field.
func ValueHasSuffix(v string) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldHasSuffix(FieldValue, v))
}

// ValueIsNil applies the IsNil predicate on the "value" field.
func ValueIsNil() predicate.DictDetail {
	return predicate.DictDetail(sql.FieldIsNull(FieldValue))
}

// ValueNotNil applies the NotNil predicate on the "value" field.
func ValueNotNil() predicate.DictDetail {
	return predicate.DictDetail(sql.FieldNotNull(FieldValue))
}

// ValueEqualFold applies the EqualFold predicate on the "value" field.
func ValueEqualFold(v string) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldEqualFold(FieldValue, v))
}

// ValueContainsFold applies the ContainsFold predicate on the "value" field.
func ValueContainsFold(v string) predicate.DictDetail {
	return predicate.DictDetail(sql.FieldContainsFold(FieldValue, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DictDetail) predicate.DictDetail {
	return predicate.DictDetail(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DictDetail) predicate.DictDetail {
	return predicate.DictDetail(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DictDetail) predicate.DictDetail {
	return predicate.DictDetail(sql.NotPredicates(p))
}
