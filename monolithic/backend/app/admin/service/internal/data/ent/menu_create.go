// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-monolithic-demo/app/admin/service/internal/data/ent/menu"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MenuCreate is the builder for creating a Menu entity.
type MenuCreate struct {
	config
	mutation *MenuMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetStatus sets the "status" field.
func (mc *MenuCreate) SetStatus(m menu.Status) *MenuCreate {
	mc.mutation.SetStatus(m)
	return mc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mc *MenuCreate) SetNillableStatus(m *menu.Status) *MenuCreate {
	if m != nil {
		mc.SetStatus(*m)
	}
	return mc
}

// SetCreateTime sets the "create_time" field.
func (mc *MenuCreate) SetCreateTime(t time.Time) *MenuCreate {
	mc.mutation.SetCreateTime(t)
	return mc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (mc *MenuCreate) SetNillableCreateTime(t *time.Time) *MenuCreate {
	if t != nil {
		mc.SetCreateTime(*t)
	}
	return mc
}

// SetUpdateTime sets the "update_time" field.
func (mc *MenuCreate) SetUpdateTime(t time.Time) *MenuCreate {
	mc.mutation.SetUpdateTime(t)
	return mc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (mc *MenuCreate) SetNillableUpdateTime(t *time.Time) *MenuCreate {
	if t != nil {
		mc.SetUpdateTime(*t)
	}
	return mc
}

// SetDeleteTime sets the "delete_time" field.
func (mc *MenuCreate) SetDeleteTime(t time.Time) *MenuCreate {
	mc.mutation.SetDeleteTime(t)
	return mc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (mc *MenuCreate) SetNillableDeleteTime(t *time.Time) *MenuCreate {
	if t != nil {
		mc.SetDeleteTime(*t)
	}
	return mc
}

// SetCreateBy sets the "create_by" field.
func (mc *MenuCreate) SetCreateBy(u uint32) *MenuCreate {
	mc.mutation.SetCreateBy(u)
	return mc
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (mc *MenuCreate) SetNillableCreateBy(u *uint32) *MenuCreate {
	if u != nil {
		mc.SetCreateBy(*u)
	}
	return mc
}

// SetParentID sets the "parent_id" field.
func (mc *MenuCreate) SetParentID(i int32) *MenuCreate {
	mc.mutation.SetParentID(i)
	return mc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (mc *MenuCreate) SetNillableParentID(i *int32) *MenuCreate {
	if i != nil {
		mc.SetParentID(*i)
	}
	return mc
}

// SetOrderNo sets the "order_no" field.
func (mc *MenuCreate) SetOrderNo(i int32) *MenuCreate {
	mc.mutation.SetOrderNo(i)
	return mc
}

// SetNillableOrderNo sets the "order_no" field if the given value is not nil.
func (mc *MenuCreate) SetNillableOrderNo(i *int32) *MenuCreate {
	if i != nil {
		mc.SetOrderNo(*i)
	}
	return mc
}

// SetName sets the "name" field.
func (mc *MenuCreate) SetName(s string) *MenuCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mc *MenuCreate) SetNillableName(s *string) *MenuCreate {
	if s != nil {
		mc.SetName(*s)
	}
	return mc
}

// SetTitle sets the "title" field.
func (mc *MenuCreate) SetTitle(s string) *MenuCreate {
	mc.mutation.SetTitle(s)
	return mc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (mc *MenuCreate) SetNillableTitle(s *string) *MenuCreate {
	if s != nil {
		mc.SetTitle(*s)
	}
	return mc
}

// SetType sets the "type" field.
func (mc *MenuCreate) SetType(m menu.Type) *MenuCreate {
	mc.mutation.SetType(m)
	return mc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mc *MenuCreate) SetNillableType(m *menu.Type) *MenuCreate {
	if m != nil {
		mc.SetType(*m)
	}
	return mc
}

// SetPath sets the "path" field.
func (mc *MenuCreate) SetPath(s string) *MenuCreate {
	mc.mutation.SetPath(s)
	return mc
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (mc *MenuCreate) SetNillablePath(s *string) *MenuCreate {
	if s != nil {
		mc.SetPath(*s)
	}
	return mc
}

// SetComponent sets the "component" field.
func (mc *MenuCreate) SetComponent(s string) *MenuCreate {
	mc.mutation.SetComponent(s)
	return mc
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (mc *MenuCreate) SetNillableComponent(s *string) *MenuCreate {
	if s != nil {
		mc.SetComponent(*s)
	}
	return mc
}

// SetIcon sets the "icon" field.
func (mc *MenuCreate) SetIcon(s string) *MenuCreate {
	mc.mutation.SetIcon(s)
	return mc
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (mc *MenuCreate) SetNillableIcon(s *string) *MenuCreate {
	if s != nil {
		mc.SetIcon(*s)
	}
	return mc
}

// SetIsExt sets the "is_ext" field.
func (mc *MenuCreate) SetIsExt(b bool) *MenuCreate {
	mc.mutation.SetIsExt(b)
	return mc
}

// SetNillableIsExt sets the "is_ext" field if the given value is not nil.
func (mc *MenuCreate) SetNillableIsExt(b *bool) *MenuCreate {
	if b != nil {
		mc.SetIsExt(*b)
	}
	return mc
}

// SetExtURL sets the "ext_url" field.
func (mc *MenuCreate) SetExtURL(s string) *MenuCreate {
	mc.mutation.SetExtURL(s)
	return mc
}

// SetNillableExtURL sets the "ext_url" field if the given value is not nil.
func (mc *MenuCreate) SetNillableExtURL(s *string) *MenuCreate {
	if s != nil {
		mc.SetExtURL(*s)
	}
	return mc
}

// SetPermissions sets the "permissions" field.
func (mc *MenuCreate) SetPermissions(s []string) *MenuCreate {
	mc.mutation.SetPermissions(s)
	return mc
}

// SetRedirect sets the "redirect" field.
func (mc *MenuCreate) SetRedirect(s string) *MenuCreate {
	mc.mutation.SetRedirect(s)
	return mc
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (mc *MenuCreate) SetNillableRedirect(s *string) *MenuCreate {
	if s != nil {
		mc.SetRedirect(*s)
	}
	return mc
}

// SetCurrentActiveMenu sets the "current_active_menu" field.
func (mc *MenuCreate) SetCurrentActiveMenu(s string) *MenuCreate {
	mc.mutation.SetCurrentActiveMenu(s)
	return mc
}

// SetNillableCurrentActiveMenu sets the "current_active_menu" field if the given value is not nil.
func (mc *MenuCreate) SetNillableCurrentActiveMenu(s *string) *MenuCreate {
	if s != nil {
		mc.SetCurrentActiveMenu(*s)
	}
	return mc
}

// SetKeepAlive sets the "keep_alive" field.
func (mc *MenuCreate) SetKeepAlive(b bool) *MenuCreate {
	mc.mutation.SetKeepAlive(b)
	return mc
}

// SetNillableKeepAlive sets the "keep_alive" field if the given value is not nil.
func (mc *MenuCreate) SetNillableKeepAlive(b *bool) *MenuCreate {
	if b != nil {
		mc.SetKeepAlive(*b)
	}
	return mc
}

// SetShow sets the "show" field.
func (mc *MenuCreate) SetShow(b bool) *MenuCreate {
	mc.mutation.SetShow(b)
	return mc
}

// SetNillableShow sets the "show" field if the given value is not nil.
func (mc *MenuCreate) SetNillableShow(b *bool) *MenuCreate {
	if b != nil {
		mc.SetShow(*b)
	}
	return mc
}

// SetHideTab sets the "hide_tab" field.
func (mc *MenuCreate) SetHideTab(b bool) *MenuCreate {
	mc.mutation.SetHideTab(b)
	return mc
}

// SetNillableHideTab sets the "hide_tab" field if the given value is not nil.
func (mc *MenuCreate) SetNillableHideTab(b *bool) *MenuCreate {
	if b != nil {
		mc.SetHideTab(*b)
	}
	return mc
}

// SetHideMenu sets the "hide_menu" field.
func (mc *MenuCreate) SetHideMenu(b bool) *MenuCreate {
	mc.mutation.SetHideMenu(b)
	return mc
}

// SetNillableHideMenu sets the "hide_menu" field if the given value is not nil.
func (mc *MenuCreate) SetNillableHideMenu(b *bool) *MenuCreate {
	if b != nil {
		mc.SetHideMenu(*b)
	}
	return mc
}

// SetHideBreadcrumb sets the "hide_breadcrumb" field.
func (mc *MenuCreate) SetHideBreadcrumb(b bool) *MenuCreate {
	mc.mutation.SetHideBreadcrumb(b)
	return mc
}

// SetNillableHideBreadcrumb sets the "hide_breadcrumb" field if the given value is not nil.
func (mc *MenuCreate) SetNillableHideBreadcrumb(b *bool) *MenuCreate {
	if b != nil {
		mc.SetHideBreadcrumb(*b)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MenuCreate) SetID(i int32) *MenuCreate {
	mc.mutation.SetID(i)
	return mc
}

// SetParent sets the "parent" edge to the Menu entity.
func (mc *MenuCreate) SetParent(m *Menu) *MenuCreate {
	return mc.SetParentID(m.ID)
}

// AddChildIDs adds the "children" edge to the Menu entity by IDs.
func (mc *MenuCreate) AddChildIDs(ids ...int32) *MenuCreate {
	mc.mutation.AddChildIDs(ids...)
	return mc
}

// AddChildren adds the "children" edges to the Menu entity.
func (mc *MenuCreate) AddChildren(m ...*Menu) *MenuCreate {
	ids := make([]int32, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddChildIDs(ids...)
}

// Mutation returns the MenuMutation object of the builder.
func (mc *MenuCreate) Mutation() *MenuMutation {
	return mc.mutation
}

// Save creates the Menu in the database.
func (mc *MenuCreate) Save(ctx context.Context) (*Menu, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MenuCreate) SaveX(ctx context.Context) *Menu {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MenuCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MenuCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MenuCreate) defaults() {
	if _, ok := mc.mutation.Status(); !ok {
		v := menu.DefaultStatus
		mc.mutation.SetStatus(v)
	}
	if _, ok := mc.mutation.OrderNo(); !ok {
		v := menu.DefaultOrderNo
		mc.mutation.SetOrderNo(v)
	}
	if _, ok := mc.mutation.Name(); !ok {
		v := menu.DefaultName
		mc.mutation.SetName(v)
	}
	if _, ok := mc.mutation.Title(); !ok {
		v := menu.DefaultTitle
		mc.mutation.SetTitle(v)
	}
	if _, ok := mc.mutation.Path(); !ok {
		v := menu.DefaultPath
		mc.mutation.SetPath(v)
	}
	if _, ok := mc.mutation.Component(); !ok {
		v := menu.DefaultComponent
		mc.mutation.SetComponent(v)
	}
	if _, ok := mc.mutation.Icon(); !ok {
		v := menu.DefaultIcon
		mc.mutation.SetIcon(v)
	}
	if _, ok := mc.mutation.IsExt(); !ok {
		v := menu.DefaultIsExt
		mc.mutation.SetIsExt(v)
	}
	if _, ok := mc.mutation.KeepAlive(); !ok {
		v := menu.DefaultKeepAlive
		mc.mutation.SetKeepAlive(v)
	}
	if _, ok := mc.mutation.Show(); !ok {
		v := menu.DefaultShow
		mc.mutation.SetShow(v)
	}
	if _, ok := mc.mutation.HideTab(); !ok {
		v := menu.DefaultHideTab
		mc.mutation.SetHideTab(v)
	}
	if _, ok := mc.mutation.HideMenu(); !ok {
		v := menu.DefaultHideMenu
		mc.mutation.SetHideMenu(v)
	}
	if _, ok := mc.mutation.HideBreadcrumb(); !ok {
		v := menu.DefaultHideBreadcrumb
		mc.mutation.SetHideBreadcrumb(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MenuCreate) check() error {
	if v, ok := mc.mutation.Status(); ok {
		if err := menu.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Menu.status": %w`, err)}
		}
	}
	if v, ok := mc.mutation.Name(); ok {
		if err := menu.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Menu.name": %w`, err)}
		}
	}
	if v, ok := mc.mutation.Title(); ok {
		if err := menu.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Menu.title": %w`, err)}
		}
	}
	if v, ok := mc.mutation.GetType(); ok {
		if err := menu.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Menu.type": %w`, err)}
		}
	}
	if v, ok := mc.mutation.Icon(); ok {
		if err := menu.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`ent: validator failed for field "Menu.icon": %w`, err)}
		}
	}
	if v, ok := mc.mutation.ExtURL(); ok {
		if err := menu.ExtURLValidator(v); err != nil {
			return &ValidationError{Name: "ext_url", err: fmt.Errorf(`ent: validator failed for field "Menu.ext_url": %w`, err)}
		}
	}
	if v, ok := mc.mutation.ID(); ok {
		if err := menu.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Menu.id": %w`, err)}
		}
	}
	return nil
}

func (mc *MenuCreate) sqlSave(ctx context.Context) (*Menu, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MenuCreate) createSpec() (*Menu, *sqlgraph.CreateSpec) {
	var (
		_node = &Menu{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(menu.Table, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt32))
	)
	_spec.OnConflict = mc.conflict
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.Status(); ok {
		_spec.SetField(menu.FieldStatus, field.TypeEnum, value)
		_node.Status = &value
	}
	if value, ok := mc.mutation.CreateTime(); ok {
		_spec.SetField(menu.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := mc.mutation.UpdateTime(); ok {
		_spec.SetField(menu.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = &value
	}
	if value, ok := mc.mutation.DeleteTime(); ok {
		_spec.SetField(menu.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = &value
	}
	if value, ok := mc.mutation.CreateBy(); ok {
		_spec.SetField(menu.FieldCreateBy, field.TypeUint32, value)
		_node.CreateBy = &value
	}
	if value, ok := mc.mutation.OrderNo(); ok {
		_spec.SetField(menu.FieldOrderNo, field.TypeInt32, value)
		_node.OrderNo = &value
	}
	if value, ok := mc.mutation.Name(); ok {
		_spec.SetField(menu.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := mc.mutation.Title(); ok {
		_spec.SetField(menu.FieldTitle, field.TypeString, value)
		_node.Title = &value
	}
	if value, ok := mc.mutation.GetType(); ok {
		_spec.SetField(menu.FieldType, field.TypeEnum, value)
		_node.Type = &value
	}
	if value, ok := mc.mutation.Path(); ok {
		_spec.SetField(menu.FieldPath, field.TypeString, value)
		_node.Path = &value
	}
	if value, ok := mc.mutation.Component(); ok {
		_spec.SetField(menu.FieldComponent, field.TypeString, value)
		_node.Component = &value
	}
	if value, ok := mc.mutation.Icon(); ok {
		_spec.SetField(menu.FieldIcon, field.TypeString, value)
		_node.Icon = &value
	}
	if value, ok := mc.mutation.IsExt(); ok {
		_spec.SetField(menu.FieldIsExt, field.TypeBool, value)
		_node.IsExt = &value
	}
	if value, ok := mc.mutation.ExtURL(); ok {
		_spec.SetField(menu.FieldExtURL, field.TypeString, value)
		_node.ExtURL = &value
	}
	if value, ok := mc.mutation.Permissions(); ok {
		_spec.SetField(menu.FieldPermissions, field.TypeJSON, value)
		_node.Permissions = value
	}
	if value, ok := mc.mutation.Redirect(); ok {
		_spec.SetField(menu.FieldRedirect, field.TypeString, value)
		_node.Redirect = &value
	}
	if value, ok := mc.mutation.CurrentActiveMenu(); ok {
		_spec.SetField(menu.FieldCurrentActiveMenu, field.TypeString, value)
		_node.CurrentActiveMenu = &value
	}
	if value, ok := mc.mutation.KeepAlive(); ok {
		_spec.SetField(menu.FieldKeepAlive, field.TypeBool, value)
		_node.KeepAlive = &value
	}
	if value, ok := mc.mutation.Show(); ok {
		_spec.SetField(menu.FieldShow, field.TypeBool, value)
		_node.Show = &value
	}
	if value, ok := mc.mutation.HideTab(); ok {
		_spec.SetField(menu.FieldHideTab, field.TypeBool, value)
		_node.HideTab = &value
	}
	if value, ok := mc.mutation.HideMenu(); ok {
		_spec.SetField(menu.FieldHideMenu, field.TypeBool, value)
		_node.HideMenu = &value
	}
	if value, ok := mc.mutation.HideBreadcrumb(); ok {
		_spec.SetField(menu.FieldHideBreadcrumb, field.TypeBool, value)
		_node.HideBreadcrumb = &value
	}
	if nodes := mc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeInt32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Menu.Create().
//		SetStatus(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MenuUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
func (mc *MenuCreate) OnConflict(opts ...sql.ConflictOption) *MenuUpsertOne {
	mc.conflict = opts
	return &MenuUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Menu.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *MenuCreate) OnConflictColumns(columns ...string) *MenuUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MenuUpsertOne{
		create: mc,
	}
}

type (
	// MenuUpsertOne is the builder for "upsert"-ing
	//  one Menu node.
	MenuUpsertOne struct {
		create *MenuCreate
	}

	// MenuUpsert is the "OnConflict" setter.
	MenuUpsert struct {
		*sql.UpdateSet
	}
)

// SetStatus sets the "status" field.
func (u *MenuUpsert) SetStatus(v menu.Status) *MenuUpsert {
	u.Set(menu.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MenuUpsert) UpdateStatus() *MenuUpsert {
	u.SetExcluded(menu.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *MenuUpsert) ClearStatus() *MenuUpsert {
	u.SetNull(menu.FieldStatus)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *MenuUpsert) SetUpdateTime(v time.Time) *MenuUpsert {
	u.Set(menu.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *MenuUpsert) UpdateUpdateTime() *MenuUpsert {
	u.SetExcluded(menu.FieldUpdateTime)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *MenuUpsert) ClearUpdateTime() *MenuUpsert {
	u.SetNull(menu.FieldUpdateTime)
	return u
}

// SetDeleteTime sets the "delete_time" field.
func (u *MenuUpsert) SetDeleteTime(v time.Time) *MenuUpsert {
	u.Set(menu.FieldDeleteTime, v)
	return u
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *MenuUpsert) UpdateDeleteTime() *MenuUpsert {
	u.SetExcluded(menu.FieldDeleteTime)
	return u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *MenuUpsert) ClearDeleteTime() *MenuUpsert {
	u.SetNull(menu.FieldDeleteTime)
	return u
}

// SetCreateBy sets the "create_by" field.
func (u *MenuUpsert) SetCreateBy(v uint32) *MenuUpsert {
	u.Set(menu.FieldCreateBy, v)
	return u
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *MenuUpsert) UpdateCreateBy() *MenuUpsert {
	u.SetExcluded(menu.FieldCreateBy)
	return u
}

// AddCreateBy adds v to the "create_by" field.
func (u *MenuUpsert) AddCreateBy(v uint32) *MenuUpsert {
	u.Add(menu.FieldCreateBy, v)
	return u
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *MenuUpsert) ClearCreateBy() *MenuUpsert {
	u.SetNull(menu.FieldCreateBy)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *MenuUpsert) SetParentID(v int32) *MenuUpsert {
	u.Set(menu.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *MenuUpsert) UpdateParentID() *MenuUpsert {
	u.SetExcluded(menu.FieldParentID)
	return u
}

// ClearParentID clears the value of the "parent_id" field.
func (u *MenuUpsert) ClearParentID() *MenuUpsert {
	u.SetNull(menu.FieldParentID)
	return u
}

// SetOrderNo sets the "order_no" field.
func (u *MenuUpsert) SetOrderNo(v int32) *MenuUpsert {
	u.Set(menu.FieldOrderNo, v)
	return u
}

// UpdateOrderNo sets the "order_no" field to the value that was provided on create.
func (u *MenuUpsert) UpdateOrderNo() *MenuUpsert {
	u.SetExcluded(menu.FieldOrderNo)
	return u
}

// AddOrderNo adds v to the "order_no" field.
func (u *MenuUpsert) AddOrderNo(v int32) *MenuUpsert {
	u.Add(menu.FieldOrderNo, v)
	return u
}

// ClearOrderNo clears the value of the "order_no" field.
func (u *MenuUpsert) ClearOrderNo() *MenuUpsert {
	u.SetNull(menu.FieldOrderNo)
	return u
}

// SetName sets the "name" field.
func (u *MenuUpsert) SetName(v string) *MenuUpsert {
	u.Set(menu.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MenuUpsert) UpdateName() *MenuUpsert {
	u.SetExcluded(menu.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *MenuUpsert) ClearName() *MenuUpsert {
	u.SetNull(menu.FieldName)
	return u
}

// SetTitle sets the "title" field.
func (u *MenuUpsert) SetTitle(v string) *MenuUpsert {
	u.Set(menu.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *MenuUpsert) UpdateTitle() *MenuUpsert {
	u.SetExcluded(menu.FieldTitle)
	return u
}

// ClearTitle clears the value of the "title" field.
func (u *MenuUpsert) ClearTitle() *MenuUpsert {
	u.SetNull(menu.FieldTitle)
	return u
}

// SetType sets the "type" field.
func (u *MenuUpsert) SetType(v menu.Type) *MenuUpsert {
	u.Set(menu.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MenuUpsert) UpdateType() *MenuUpsert {
	u.SetExcluded(menu.FieldType)
	return u
}

// ClearType clears the value of the "type" field.
func (u *MenuUpsert) ClearType() *MenuUpsert {
	u.SetNull(menu.FieldType)
	return u
}

// SetPath sets the "path" field.
func (u *MenuUpsert) SetPath(v string) *MenuUpsert {
	u.Set(menu.FieldPath, v)
	return u
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *MenuUpsert) UpdatePath() *MenuUpsert {
	u.SetExcluded(menu.FieldPath)
	return u
}

// ClearPath clears the value of the "path" field.
func (u *MenuUpsert) ClearPath() *MenuUpsert {
	u.SetNull(menu.FieldPath)
	return u
}

// SetComponent sets the "component" field.
func (u *MenuUpsert) SetComponent(v string) *MenuUpsert {
	u.Set(menu.FieldComponent, v)
	return u
}

// UpdateComponent sets the "component" field to the value that was provided on create.
func (u *MenuUpsert) UpdateComponent() *MenuUpsert {
	u.SetExcluded(menu.FieldComponent)
	return u
}

// ClearComponent clears the value of the "component" field.
func (u *MenuUpsert) ClearComponent() *MenuUpsert {
	u.SetNull(menu.FieldComponent)
	return u
}

// SetIcon sets the "icon" field.
func (u *MenuUpsert) SetIcon(v string) *MenuUpsert {
	u.Set(menu.FieldIcon, v)
	return u
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *MenuUpsert) UpdateIcon() *MenuUpsert {
	u.SetExcluded(menu.FieldIcon)
	return u
}

// ClearIcon clears the value of the "icon" field.
func (u *MenuUpsert) ClearIcon() *MenuUpsert {
	u.SetNull(menu.FieldIcon)
	return u
}

// SetIsExt sets the "is_ext" field.
func (u *MenuUpsert) SetIsExt(v bool) *MenuUpsert {
	u.Set(menu.FieldIsExt, v)
	return u
}

// UpdateIsExt sets the "is_ext" field to the value that was provided on create.
func (u *MenuUpsert) UpdateIsExt() *MenuUpsert {
	u.SetExcluded(menu.FieldIsExt)
	return u
}

// ClearIsExt clears the value of the "is_ext" field.
func (u *MenuUpsert) ClearIsExt() *MenuUpsert {
	u.SetNull(menu.FieldIsExt)
	return u
}

// SetExtURL sets the "ext_url" field.
func (u *MenuUpsert) SetExtURL(v string) *MenuUpsert {
	u.Set(menu.FieldExtURL, v)
	return u
}

// UpdateExtURL sets the "ext_url" field to the value that was provided on create.
func (u *MenuUpsert) UpdateExtURL() *MenuUpsert {
	u.SetExcluded(menu.FieldExtURL)
	return u
}

// ClearExtURL clears the value of the "ext_url" field.
func (u *MenuUpsert) ClearExtURL() *MenuUpsert {
	u.SetNull(menu.FieldExtURL)
	return u
}

// SetPermissions sets the "permissions" field.
func (u *MenuUpsert) SetPermissions(v []string) *MenuUpsert {
	u.Set(menu.FieldPermissions, v)
	return u
}

// UpdatePermissions sets the "permissions" field to the value that was provided on create.
func (u *MenuUpsert) UpdatePermissions() *MenuUpsert {
	u.SetExcluded(menu.FieldPermissions)
	return u
}

// ClearPermissions clears the value of the "permissions" field.
func (u *MenuUpsert) ClearPermissions() *MenuUpsert {
	u.SetNull(menu.FieldPermissions)
	return u
}

// SetRedirect sets the "redirect" field.
func (u *MenuUpsert) SetRedirect(v string) *MenuUpsert {
	u.Set(menu.FieldRedirect, v)
	return u
}

// UpdateRedirect sets the "redirect" field to the value that was provided on create.
func (u *MenuUpsert) UpdateRedirect() *MenuUpsert {
	u.SetExcluded(menu.FieldRedirect)
	return u
}

// ClearRedirect clears the value of the "redirect" field.
func (u *MenuUpsert) ClearRedirect() *MenuUpsert {
	u.SetNull(menu.FieldRedirect)
	return u
}

// SetCurrentActiveMenu sets the "current_active_menu" field.
func (u *MenuUpsert) SetCurrentActiveMenu(v string) *MenuUpsert {
	u.Set(menu.FieldCurrentActiveMenu, v)
	return u
}

// UpdateCurrentActiveMenu sets the "current_active_menu" field to the value that was provided on create.
func (u *MenuUpsert) UpdateCurrentActiveMenu() *MenuUpsert {
	u.SetExcluded(menu.FieldCurrentActiveMenu)
	return u
}

// ClearCurrentActiveMenu clears the value of the "current_active_menu" field.
func (u *MenuUpsert) ClearCurrentActiveMenu() *MenuUpsert {
	u.SetNull(menu.FieldCurrentActiveMenu)
	return u
}

// SetKeepAlive sets the "keep_alive" field.
func (u *MenuUpsert) SetKeepAlive(v bool) *MenuUpsert {
	u.Set(menu.FieldKeepAlive, v)
	return u
}

// UpdateKeepAlive sets the "keep_alive" field to the value that was provided on create.
func (u *MenuUpsert) UpdateKeepAlive() *MenuUpsert {
	u.SetExcluded(menu.FieldKeepAlive)
	return u
}

// ClearKeepAlive clears the value of the "keep_alive" field.
func (u *MenuUpsert) ClearKeepAlive() *MenuUpsert {
	u.SetNull(menu.FieldKeepAlive)
	return u
}

// SetShow sets the "show" field.
func (u *MenuUpsert) SetShow(v bool) *MenuUpsert {
	u.Set(menu.FieldShow, v)
	return u
}

// UpdateShow sets the "show" field to the value that was provided on create.
func (u *MenuUpsert) UpdateShow() *MenuUpsert {
	u.SetExcluded(menu.FieldShow)
	return u
}

// ClearShow clears the value of the "show" field.
func (u *MenuUpsert) ClearShow() *MenuUpsert {
	u.SetNull(menu.FieldShow)
	return u
}

// SetHideTab sets the "hide_tab" field.
func (u *MenuUpsert) SetHideTab(v bool) *MenuUpsert {
	u.Set(menu.FieldHideTab, v)
	return u
}

// UpdateHideTab sets the "hide_tab" field to the value that was provided on create.
func (u *MenuUpsert) UpdateHideTab() *MenuUpsert {
	u.SetExcluded(menu.FieldHideTab)
	return u
}

// ClearHideTab clears the value of the "hide_tab" field.
func (u *MenuUpsert) ClearHideTab() *MenuUpsert {
	u.SetNull(menu.FieldHideTab)
	return u
}

// SetHideMenu sets the "hide_menu" field.
func (u *MenuUpsert) SetHideMenu(v bool) *MenuUpsert {
	u.Set(menu.FieldHideMenu, v)
	return u
}

// UpdateHideMenu sets the "hide_menu" field to the value that was provided on create.
func (u *MenuUpsert) UpdateHideMenu() *MenuUpsert {
	u.SetExcluded(menu.FieldHideMenu)
	return u
}

// ClearHideMenu clears the value of the "hide_menu" field.
func (u *MenuUpsert) ClearHideMenu() *MenuUpsert {
	u.SetNull(menu.FieldHideMenu)
	return u
}

// SetHideBreadcrumb sets the "hide_breadcrumb" field.
func (u *MenuUpsert) SetHideBreadcrumb(v bool) *MenuUpsert {
	u.Set(menu.FieldHideBreadcrumb, v)
	return u
}

// UpdateHideBreadcrumb sets the "hide_breadcrumb" field to the value that was provided on create.
func (u *MenuUpsert) UpdateHideBreadcrumb() *MenuUpsert {
	u.SetExcluded(menu.FieldHideBreadcrumb)
	return u
}

// ClearHideBreadcrumb clears the value of the "hide_breadcrumb" field.
func (u *MenuUpsert) ClearHideBreadcrumb() *MenuUpsert {
	u.SetNull(menu.FieldHideBreadcrumb)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Menu.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(menu.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MenuUpsertOne) UpdateNewValues() *MenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(menu.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(menu.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Menu.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MenuUpsertOne) Ignore() *MenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MenuUpsertOne) DoNothing() *MenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MenuCreate.OnConflict
// documentation for more info.
func (u *MenuUpsertOne) Update(set func(*MenuUpsert)) *MenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MenuUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *MenuUpsertOne) SetStatus(v menu.Status) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateStatus() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *MenuUpsertOne) ClearStatus() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearStatus()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *MenuUpsertOne) SetUpdateTime(v time.Time) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateUpdateTime() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *MenuUpsertOne) ClearUpdateTime() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *MenuUpsertOne) SetDeleteTime(v time.Time) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateDeleteTime() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *MenuUpsertOne) ClearDeleteTime() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearDeleteTime()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *MenuUpsertOne) SetCreateBy(v uint32) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetCreateBy(v)
	})
}

// AddCreateBy adds v to the "create_by" field.
func (u *MenuUpsertOne) AddCreateBy(v uint32) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.AddCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateCreateBy() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateCreateBy()
	})
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *MenuUpsertOne) ClearCreateBy() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearCreateBy()
	})
}

// SetParentID sets the "parent_id" field.
func (u *MenuUpsertOne) SetParentID(v int32) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateParentID() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *MenuUpsertOne) ClearParentID() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearParentID()
	})
}

// SetOrderNo sets the "order_no" field.
func (u *MenuUpsertOne) SetOrderNo(v int32) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetOrderNo(v)
	})
}

// AddOrderNo adds v to the "order_no" field.
func (u *MenuUpsertOne) AddOrderNo(v int32) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.AddOrderNo(v)
	})
}

// UpdateOrderNo sets the "order_no" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateOrderNo() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateOrderNo()
	})
}

// ClearOrderNo clears the value of the "order_no" field.
func (u *MenuUpsertOne) ClearOrderNo() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearOrderNo()
	})
}

// SetName sets the "name" field.
func (u *MenuUpsertOne) SetName(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateName() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *MenuUpsertOne) ClearName() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearName()
	})
}

// SetTitle sets the "title" field.
func (u *MenuUpsertOne) SetTitle(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateTitle() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *MenuUpsertOne) ClearTitle() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearTitle()
	})
}

// SetType sets the "type" field.
func (u *MenuUpsertOne) SetType(v menu.Type) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateType() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *MenuUpsertOne) ClearType() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearType()
	})
}

// SetPath sets the "path" field.
func (u *MenuUpsertOne) SetPath(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdatePath() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdatePath()
	})
}

// ClearPath clears the value of the "path" field.
func (u *MenuUpsertOne) ClearPath() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearPath()
	})
}

// SetComponent sets the "component" field.
func (u *MenuUpsertOne) SetComponent(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetComponent(v)
	})
}

// UpdateComponent sets the "component" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateComponent() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateComponent()
	})
}

// ClearComponent clears the value of the "component" field.
func (u *MenuUpsertOne) ClearComponent() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearComponent()
	})
}

// SetIcon sets the "icon" field.
func (u *MenuUpsertOne) SetIcon(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateIcon() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateIcon()
	})
}

// ClearIcon clears the value of the "icon" field.
func (u *MenuUpsertOne) ClearIcon() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearIcon()
	})
}

// SetIsExt sets the "is_ext" field.
func (u *MenuUpsertOne) SetIsExt(v bool) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetIsExt(v)
	})
}

// UpdateIsExt sets the "is_ext" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateIsExt() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateIsExt()
	})
}

// ClearIsExt clears the value of the "is_ext" field.
func (u *MenuUpsertOne) ClearIsExt() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearIsExt()
	})
}

// SetExtURL sets the "ext_url" field.
func (u *MenuUpsertOne) SetExtURL(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetExtURL(v)
	})
}

// UpdateExtURL sets the "ext_url" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateExtURL() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateExtURL()
	})
}

// ClearExtURL clears the value of the "ext_url" field.
func (u *MenuUpsertOne) ClearExtURL() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearExtURL()
	})
}

// SetPermissions sets the "permissions" field.
func (u *MenuUpsertOne) SetPermissions(v []string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetPermissions(v)
	})
}

// UpdatePermissions sets the "permissions" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdatePermissions() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdatePermissions()
	})
}

// ClearPermissions clears the value of the "permissions" field.
func (u *MenuUpsertOne) ClearPermissions() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearPermissions()
	})
}

// SetRedirect sets the "redirect" field.
func (u *MenuUpsertOne) SetRedirect(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetRedirect(v)
	})
}

// UpdateRedirect sets the "redirect" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateRedirect() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateRedirect()
	})
}

// ClearRedirect clears the value of the "redirect" field.
func (u *MenuUpsertOne) ClearRedirect() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearRedirect()
	})
}

// SetCurrentActiveMenu sets the "current_active_menu" field.
func (u *MenuUpsertOne) SetCurrentActiveMenu(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetCurrentActiveMenu(v)
	})
}

// UpdateCurrentActiveMenu sets the "current_active_menu" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateCurrentActiveMenu() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateCurrentActiveMenu()
	})
}

// ClearCurrentActiveMenu clears the value of the "current_active_menu" field.
func (u *MenuUpsertOne) ClearCurrentActiveMenu() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearCurrentActiveMenu()
	})
}

// SetKeepAlive sets the "keep_alive" field.
func (u *MenuUpsertOne) SetKeepAlive(v bool) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetKeepAlive(v)
	})
}

// UpdateKeepAlive sets the "keep_alive" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateKeepAlive() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateKeepAlive()
	})
}

// ClearKeepAlive clears the value of the "keep_alive" field.
func (u *MenuUpsertOne) ClearKeepAlive() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearKeepAlive()
	})
}

// SetShow sets the "show" field.
func (u *MenuUpsertOne) SetShow(v bool) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetShow(v)
	})
}

// UpdateShow sets the "show" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateShow() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateShow()
	})
}

// ClearShow clears the value of the "show" field.
func (u *MenuUpsertOne) ClearShow() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearShow()
	})
}

// SetHideTab sets the "hide_tab" field.
func (u *MenuUpsertOne) SetHideTab(v bool) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetHideTab(v)
	})
}

// UpdateHideTab sets the "hide_tab" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateHideTab() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateHideTab()
	})
}

// ClearHideTab clears the value of the "hide_tab" field.
func (u *MenuUpsertOne) ClearHideTab() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearHideTab()
	})
}

// SetHideMenu sets the "hide_menu" field.
func (u *MenuUpsertOne) SetHideMenu(v bool) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetHideMenu(v)
	})
}

// UpdateHideMenu sets the "hide_menu" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateHideMenu() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateHideMenu()
	})
}

// ClearHideMenu clears the value of the "hide_menu" field.
func (u *MenuUpsertOne) ClearHideMenu() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearHideMenu()
	})
}

// SetHideBreadcrumb sets the "hide_breadcrumb" field.
func (u *MenuUpsertOne) SetHideBreadcrumb(v bool) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetHideBreadcrumb(v)
	})
}

// UpdateHideBreadcrumb sets the "hide_breadcrumb" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateHideBreadcrumb() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateHideBreadcrumb()
	})
}

// ClearHideBreadcrumb clears the value of the "hide_breadcrumb" field.
func (u *MenuUpsertOne) ClearHideBreadcrumb() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearHideBreadcrumb()
	})
}

// Exec executes the query.
func (u *MenuUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MenuCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MenuUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MenuUpsertOne) ID(ctx context.Context) (id int32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MenuUpsertOne) IDX(ctx context.Context) int32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MenuCreateBulk is the builder for creating many Menu entities in bulk.
type MenuCreateBulk struct {
	config
	err      error
	builders []*MenuCreate
	conflict []sql.ConflictOption
}

// Save creates the Menu entities in the database.
func (mcb *MenuCreateBulk) Save(ctx context.Context) ([]*Menu, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Menu, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MenuMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MenuCreateBulk) SaveX(ctx context.Context) []*Menu {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MenuCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MenuCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Menu.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MenuUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
func (mcb *MenuCreateBulk) OnConflict(opts ...sql.ConflictOption) *MenuUpsertBulk {
	mcb.conflict = opts
	return &MenuUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Menu.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *MenuCreateBulk) OnConflictColumns(columns ...string) *MenuUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MenuUpsertBulk{
		create: mcb,
	}
}

// MenuUpsertBulk is the builder for "upsert"-ing
// a bulk of Menu nodes.
type MenuUpsertBulk struct {
	create *MenuCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Menu.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(menu.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MenuUpsertBulk) UpdateNewValues() *MenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(menu.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(menu.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Menu.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MenuUpsertBulk) Ignore() *MenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MenuUpsertBulk) DoNothing() *MenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MenuCreateBulk.OnConflict
// documentation for more info.
func (u *MenuUpsertBulk) Update(set func(*MenuUpsert)) *MenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MenuUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *MenuUpsertBulk) SetStatus(v menu.Status) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateStatus() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *MenuUpsertBulk) ClearStatus() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearStatus()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *MenuUpsertBulk) SetUpdateTime(v time.Time) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateUpdateTime() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *MenuUpsertBulk) ClearUpdateTime() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *MenuUpsertBulk) SetDeleteTime(v time.Time) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateDeleteTime() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *MenuUpsertBulk) ClearDeleteTime() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearDeleteTime()
	})
}

// SetCreateBy sets the "create_by" field.
func (u *MenuUpsertBulk) SetCreateBy(v uint32) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetCreateBy(v)
	})
}

// AddCreateBy adds v to the "create_by" field.
func (u *MenuUpsertBulk) AddCreateBy(v uint32) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.AddCreateBy(v)
	})
}

// UpdateCreateBy sets the "create_by" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateCreateBy() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateCreateBy()
	})
}

// ClearCreateBy clears the value of the "create_by" field.
func (u *MenuUpsertBulk) ClearCreateBy() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearCreateBy()
	})
}

// SetParentID sets the "parent_id" field.
func (u *MenuUpsertBulk) SetParentID(v int32) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateParentID() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *MenuUpsertBulk) ClearParentID() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearParentID()
	})
}

// SetOrderNo sets the "order_no" field.
func (u *MenuUpsertBulk) SetOrderNo(v int32) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetOrderNo(v)
	})
}

// AddOrderNo adds v to the "order_no" field.
func (u *MenuUpsertBulk) AddOrderNo(v int32) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.AddOrderNo(v)
	})
}

// UpdateOrderNo sets the "order_no" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateOrderNo() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateOrderNo()
	})
}

// ClearOrderNo clears the value of the "order_no" field.
func (u *MenuUpsertBulk) ClearOrderNo() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearOrderNo()
	})
}

// SetName sets the "name" field.
func (u *MenuUpsertBulk) SetName(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateName() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *MenuUpsertBulk) ClearName() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearName()
	})
}

// SetTitle sets the "title" field.
func (u *MenuUpsertBulk) SetTitle(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateTitle() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *MenuUpsertBulk) ClearTitle() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearTitle()
	})
}

// SetType sets the "type" field.
func (u *MenuUpsertBulk) SetType(v menu.Type) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateType() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *MenuUpsertBulk) ClearType() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearType()
	})
}

// SetPath sets the "path" field.
func (u *MenuUpsertBulk) SetPath(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdatePath() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdatePath()
	})
}

// ClearPath clears the value of the "path" field.
func (u *MenuUpsertBulk) ClearPath() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearPath()
	})
}

// SetComponent sets the "component" field.
func (u *MenuUpsertBulk) SetComponent(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetComponent(v)
	})
}

// UpdateComponent sets the "component" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateComponent() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateComponent()
	})
}

// ClearComponent clears the value of the "component" field.
func (u *MenuUpsertBulk) ClearComponent() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearComponent()
	})
}

// SetIcon sets the "icon" field.
func (u *MenuUpsertBulk) SetIcon(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateIcon() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateIcon()
	})
}

// ClearIcon clears the value of the "icon" field.
func (u *MenuUpsertBulk) ClearIcon() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearIcon()
	})
}

// SetIsExt sets the "is_ext" field.
func (u *MenuUpsertBulk) SetIsExt(v bool) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetIsExt(v)
	})
}

// UpdateIsExt sets the "is_ext" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateIsExt() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateIsExt()
	})
}

// ClearIsExt clears the value of the "is_ext" field.
func (u *MenuUpsertBulk) ClearIsExt() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearIsExt()
	})
}

// SetExtURL sets the "ext_url" field.
func (u *MenuUpsertBulk) SetExtURL(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetExtURL(v)
	})
}

// UpdateExtURL sets the "ext_url" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateExtURL() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateExtURL()
	})
}

// ClearExtURL clears the value of the "ext_url" field.
func (u *MenuUpsertBulk) ClearExtURL() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearExtURL()
	})
}

// SetPermissions sets the "permissions" field.
func (u *MenuUpsertBulk) SetPermissions(v []string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetPermissions(v)
	})
}

// UpdatePermissions sets the "permissions" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdatePermissions() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdatePermissions()
	})
}

// ClearPermissions clears the value of the "permissions" field.
func (u *MenuUpsertBulk) ClearPermissions() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearPermissions()
	})
}

// SetRedirect sets the "redirect" field.
func (u *MenuUpsertBulk) SetRedirect(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetRedirect(v)
	})
}

// UpdateRedirect sets the "redirect" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateRedirect() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateRedirect()
	})
}

// ClearRedirect clears the value of the "redirect" field.
func (u *MenuUpsertBulk) ClearRedirect() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearRedirect()
	})
}

// SetCurrentActiveMenu sets the "current_active_menu" field.
func (u *MenuUpsertBulk) SetCurrentActiveMenu(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetCurrentActiveMenu(v)
	})
}

// UpdateCurrentActiveMenu sets the "current_active_menu" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateCurrentActiveMenu() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateCurrentActiveMenu()
	})
}

// ClearCurrentActiveMenu clears the value of the "current_active_menu" field.
func (u *MenuUpsertBulk) ClearCurrentActiveMenu() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearCurrentActiveMenu()
	})
}

// SetKeepAlive sets the "keep_alive" field.
func (u *MenuUpsertBulk) SetKeepAlive(v bool) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetKeepAlive(v)
	})
}

// UpdateKeepAlive sets the "keep_alive" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateKeepAlive() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateKeepAlive()
	})
}

// ClearKeepAlive clears the value of the "keep_alive" field.
func (u *MenuUpsertBulk) ClearKeepAlive() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearKeepAlive()
	})
}

// SetShow sets the "show" field.
func (u *MenuUpsertBulk) SetShow(v bool) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetShow(v)
	})
}

// UpdateShow sets the "show" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateShow() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateShow()
	})
}

// ClearShow clears the value of the "show" field.
func (u *MenuUpsertBulk) ClearShow() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearShow()
	})
}

// SetHideTab sets the "hide_tab" field.
func (u *MenuUpsertBulk) SetHideTab(v bool) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetHideTab(v)
	})
}

// UpdateHideTab sets the "hide_tab" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateHideTab() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateHideTab()
	})
}

// ClearHideTab clears the value of the "hide_tab" field.
func (u *MenuUpsertBulk) ClearHideTab() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearHideTab()
	})
}

// SetHideMenu sets the "hide_menu" field.
func (u *MenuUpsertBulk) SetHideMenu(v bool) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetHideMenu(v)
	})
}

// UpdateHideMenu sets the "hide_menu" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateHideMenu() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateHideMenu()
	})
}

// ClearHideMenu clears the value of the "hide_menu" field.
func (u *MenuUpsertBulk) ClearHideMenu() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearHideMenu()
	})
}

// SetHideBreadcrumb sets the "hide_breadcrumb" field.
func (u *MenuUpsertBulk) SetHideBreadcrumb(v bool) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetHideBreadcrumb(v)
	})
}

// UpdateHideBreadcrumb sets the "hide_breadcrumb" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateHideBreadcrumb() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateHideBreadcrumb()
	})
}

// ClearHideBreadcrumb clears the value of the "hide_breadcrumb" field.
func (u *MenuUpsertBulk) ClearHideBreadcrumb() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearHideBreadcrumb()
	})
}

// Exec executes the query.
func (u *MenuUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MenuCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MenuCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MenuUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
