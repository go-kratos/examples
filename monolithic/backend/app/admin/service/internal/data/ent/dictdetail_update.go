// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-monolithic-demo/app/admin/service/internal/data/ent/dictdetail"
	"kratos-monolithic-demo/app/admin/service/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DictDetailUpdate is the builder for updating DictDetail entities.
type DictDetailUpdate struct {
	config
	hooks     []Hook
	mutation  *DictDetailMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DictDetailUpdate builder.
func (ddu *DictDetailUpdate) Where(ps ...predicate.DictDetail) *DictDetailUpdate {
	ddu.mutation.Where(ps...)
	return ddu
}

// SetUpdateTime sets the "update_time" field.
func (ddu *DictDetailUpdate) SetUpdateTime(t time.Time) *DictDetailUpdate {
	ddu.mutation.SetUpdateTime(t)
	return ddu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ddu *DictDetailUpdate) SetNillableUpdateTime(t *time.Time) *DictDetailUpdate {
	if t != nil {
		ddu.SetUpdateTime(*t)
	}
	return ddu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (ddu *DictDetailUpdate) ClearUpdateTime() *DictDetailUpdate {
	ddu.mutation.ClearUpdateTime()
	return ddu
}

// SetDeleteTime sets the "delete_time" field.
func (ddu *DictDetailUpdate) SetDeleteTime(t time.Time) *DictDetailUpdate {
	ddu.mutation.SetDeleteTime(t)
	return ddu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ddu *DictDetailUpdate) SetNillableDeleteTime(t *time.Time) *DictDetailUpdate {
	if t != nil {
		ddu.SetDeleteTime(*t)
	}
	return ddu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (ddu *DictDetailUpdate) ClearDeleteTime() *DictDetailUpdate {
	ddu.mutation.ClearDeleteTime()
	return ddu
}

// SetCreateBy sets the "create_by" field.
func (ddu *DictDetailUpdate) SetCreateBy(u uint32) *DictDetailUpdate {
	ddu.mutation.ResetCreateBy()
	ddu.mutation.SetCreateBy(u)
	return ddu
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (ddu *DictDetailUpdate) SetNillableCreateBy(u *uint32) *DictDetailUpdate {
	if u != nil {
		ddu.SetCreateBy(*u)
	}
	return ddu
}

// AddCreateBy adds u to the "create_by" field.
func (ddu *DictDetailUpdate) AddCreateBy(u int32) *DictDetailUpdate {
	ddu.mutation.AddCreateBy(u)
	return ddu
}

// ClearCreateBy clears the value of the "create_by" field.
func (ddu *DictDetailUpdate) ClearCreateBy() *DictDetailUpdate {
	ddu.mutation.ClearCreateBy()
	return ddu
}

// SetDictID sets the "dict_id" field.
func (ddu *DictDetailUpdate) SetDictID(u uint32) *DictDetailUpdate {
	ddu.mutation.ResetDictID()
	ddu.mutation.SetDictID(u)
	return ddu
}

// SetNillableDictID sets the "dict_id" field if the given value is not nil.
func (ddu *DictDetailUpdate) SetNillableDictID(u *uint32) *DictDetailUpdate {
	if u != nil {
		ddu.SetDictID(*u)
	}
	return ddu
}

// AddDictID adds u to the "dict_id" field.
func (ddu *DictDetailUpdate) AddDictID(u int32) *DictDetailUpdate {
	ddu.mutation.AddDictID(u)
	return ddu
}

// ClearDictID clears the value of the "dict_id" field.
func (ddu *DictDetailUpdate) ClearDictID() *DictDetailUpdate {
	ddu.mutation.ClearDictID()
	return ddu
}

// SetOrderNo sets the "order_no" field.
func (ddu *DictDetailUpdate) SetOrderNo(i int32) *DictDetailUpdate {
	ddu.mutation.ResetOrderNo()
	ddu.mutation.SetOrderNo(i)
	return ddu
}

// SetNillableOrderNo sets the "order_no" field if the given value is not nil.
func (ddu *DictDetailUpdate) SetNillableOrderNo(i *int32) *DictDetailUpdate {
	if i != nil {
		ddu.SetOrderNo(*i)
	}
	return ddu
}

// AddOrderNo adds i to the "order_no" field.
func (ddu *DictDetailUpdate) AddOrderNo(i int32) *DictDetailUpdate {
	ddu.mutation.AddOrderNo(i)
	return ddu
}

// ClearOrderNo clears the value of the "order_no" field.
func (ddu *DictDetailUpdate) ClearOrderNo() *DictDetailUpdate {
	ddu.mutation.ClearOrderNo()
	return ddu
}

// SetLabel sets the "label" field.
func (ddu *DictDetailUpdate) SetLabel(s string) *DictDetailUpdate {
	ddu.mutation.SetLabel(s)
	return ddu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (ddu *DictDetailUpdate) SetNillableLabel(s *string) *DictDetailUpdate {
	if s != nil {
		ddu.SetLabel(*s)
	}
	return ddu
}

// ClearLabel clears the value of the "label" field.
func (ddu *DictDetailUpdate) ClearLabel() *DictDetailUpdate {
	ddu.mutation.ClearLabel()
	return ddu
}

// SetValue sets the "value" field.
func (ddu *DictDetailUpdate) SetValue(s string) *DictDetailUpdate {
	ddu.mutation.SetValue(s)
	return ddu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (ddu *DictDetailUpdate) SetNillableValue(s *string) *DictDetailUpdate {
	if s != nil {
		ddu.SetValue(*s)
	}
	return ddu
}

// ClearValue clears the value of the "value" field.
func (ddu *DictDetailUpdate) ClearValue() *DictDetailUpdate {
	ddu.mutation.ClearValue()
	return ddu
}

// Mutation returns the DictDetailMutation object of the builder.
func (ddu *DictDetailUpdate) Mutation() *DictDetailMutation {
	return ddu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ddu *DictDetailUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ddu.sqlSave, ddu.mutation, ddu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ddu *DictDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := ddu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ddu *DictDetailUpdate) Exec(ctx context.Context) error {
	_, err := ddu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ddu *DictDetailUpdate) ExecX(ctx context.Context) {
	if err := ddu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ddu *DictDetailUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DictDetailUpdate {
	ddu.modifiers = append(ddu.modifiers, modifiers...)
	return ddu
}

func (ddu *DictDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(dictdetail.Table, dictdetail.Columns, sqlgraph.NewFieldSpec(dictdetail.FieldID, field.TypeUint32))
	if ps := ddu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ddu.mutation.CreateTimeCleared() {
		_spec.ClearField(dictdetail.FieldCreateTime, field.TypeTime)
	}
	if value, ok := ddu.mutation.UpdateTime(); ok {
		_spec.SetField(dictdetail.FieldUpdateTime, field.TypeTime, value)
	}
	if ddu.mutation.UpdateTimeCleared() {
		_spec.ClearField(dictdetail.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := ddu.mutation.DeleteTime(); ok {
		_spec.SetField(dictdetail.FieldDeleteTime, field.TypeTime, value)
	}
	if ddu.mutation.DeleteTimeCleared() {
		_spec.ClearField(dictdetail.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := ddu.mutation.CreateBy(); ok {
		_spec.SetField(dictdetail.FieldCreateBy, field.TypeUint32, value)
	}
	if value, ok := ddu.mutation.AddedCreateBy(); ok {
		_spec.AddField(dictdetail.FieldCreateBy, field.TypeUint32, value)
	}
	if ddu.mutation.CreateByCleared() {
		_spec.ClearField(dictdetail.FieldCreateBy, field.TypeUint32)
	}
	if value, ok := ddu.mutation.DictID(); ok {
		_spec.SetField(dictdetail.FieldDictID, field.TypeUint32, value)
	}
	if value, ok := ddu.mutation.AddedDictID(); ok {
		_spec.AddField(dictdetail.FieldDictID, field.TypeUint32, value)
	}
	if ddu.mutation.DictIDCleared() {
		_spec.ClearField(dictdetail.FieldDictID, field.TypeUint32)
	}
	if value, ok := ddu.mutation.OrderNo(); ok {
		_spec.SetField(dictdetail.FieldOrderNo, field.TypeInt32, value)
	}
	if value, ok := ddu.mutation.AddedOrderNo(); ok {
		_spec.AddField(dictdetail.FieldOrderNo, field.TypeInt32, value)
	}
	if ddu.mutation.OrderNoCleared() {
		_spec.ClearField(dictdetail.FieldOrderNo, field.TypeInt32)
	}
	if value, ok := ddu.mutation.Label(); ok {
		_spec.SetField(dictdetail.FieldLabel, field.TypeString, value)
	}
	if ddu.mutation.LabelCleared() {
		_spec.ClearField(dictdetail.FieldLabel, field.TypeString)
	}
	if value, ok := ddu.mutation.Value(); ok {
		_spec.SetField(dictdetail.FieldValue, field.TypeString, value)
	}
	if ddu.mutation.ValueCleared() {
		_spec.ClearField(dictdetail.FieldValue, field.TypeString)
	}
	_spec.AddModifiers(ddu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ddu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dictdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ddu.mutation.done = true
	return n, nil
}

// DictDetailUpdateOne is the builder for updating a single DictDetail entity.
type DictDetailUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DictDetailMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (dduo *DictDetailUpdateOne) SetUpdateTime(t time.Time) *DictDetailUpdateOne {
	dduo.mutation.SetUpdateTime(t)
	return dduo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (dduo *DictDetailUpdateOne) SetNillableUpdateTime(t *time.Time) *DictDetailUpdateOne {
	if t != nil {
		dduo.SetUpdateTime(*t)
	}
	return dduo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (dduo *DictDetailUpdateOne) ClearUpdateTime() *DictDetailUpdateOne {
	dduo.mutation.ClearUpdateTime()
	return dduo
}

// SetDeleteTime sets the "delete_time" field.
func (dduo *DictDetailUpdateOne) SetDeleteTime(t time.Time) *DictDetailUpdateOne {
	dduo.mutation.SetDeleteTime(t)
	return dduo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (dduo *DictDetailUpdateOne) SetNillableDeleteTime(t *time.Time) *DictDetailUpdateOne {
	if t != nil {
		dduo.SetDeleteTime(*t)
	}
	return dduo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (dduo *DictDetailUpdateOne) ClearDeleteTime() *DictDetailUpdateOne {
	dduo.mutation.ClearDeleteTime()
	return dduo
}

// SetCreateBy sets the "create_by" field.
func (dduo *DictDetailUpdateOne) SetCreateBy(u uint32) *DictDetailUpdateOne {
	dduo.mutation.ResetCreateBy()
	dduo.mutation.SetCreateBy(u)
	return dduo
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (dduo *DictDetailUpdateOne) SetNillableCreateBy(u *uint32) *DictDetailUpdateOne {
	if u != nil {
		dduo.SetCreateBy(*u)
	}
	return dduo
}

// AddCreateBy adds u to the "create_by" field.
func (dduo *DictDetailUpdateOne) AddCreateBy(u int32) *DictDetailUpdateOne {
	dduo.mutation.AddCreateBy(u)
	return dduo
}

// ClearCreateBy clears the value of the "create_by" field.
func (dduo *DictDetailUpdateOne) ClearCreateBy() *DictDetailUpdateOne {
	dduo.mutation.ClearCreateBy()
	return dduo
}

// SetDictID sets the "dict_id" field.
func (dduo *DictDetailUpdateOne) SetDictID(u uint32) *DictDetailUpdateOne {
	dduo.mutation.ResetDictID()
	dduo.mutation.SetDictID(u)
	return dduo
}

// SetNillableDictID sets the "dict_id" field if the given value is not nil.
func (dduo *DictDetailUpdateOne) SetNillableDictID(u *uint32) *DictDetailUpdateOne {
	if u != nil {
		dduo.SetDictID(*u)
	}
	return dduo
}

// AddDictID adds u to the "dict_id" field.
func (dduo *DictDetailUpdateOne) AddDictID(u int32) *DictDetailUpdateOne {
	dduo.mutation.AddDictID(u)
	return dduo
}

// ClearDictID clears the value of the "dict_id" field.
func (dduo *DictDetailUpdateOne) ClearDictID() *DictDetailUpdateOne {
	dduo.mutation.ClearDictID()
	return dduo
}

// SetOrderNo sets the "order_no" field.
func (dduo *DictDetailUpdateOne) SetOrderNo(i int32) *DictDetailUpdateOne {
	dduo.mutation.ResetOrderNo()
	dduo.mutation.SetOrderNo(i)
	return dduo
}

// SetNillableOrderNo sets the "order_no" field if the given value is not nil.
func (dduo *DictDetailUpdateOne) SetNillableOrderNo(i *int32) *DictDetailUpdateOne {
	if i != nil {
		dduo.SetOrderNo(*i)
	}
	return dduo
}

// AddOrderNo adds i to the "order_no" field.
func (dduo *DictDetailUpdateOne) AddOrderNo(i int32) *DictDetailUpdateOne {
	dduo.mutation.AddOrderNo(i)
	return dduo
}

// ClearOrderNo clears the value of the "order_no" field.
func (dduo *DictDetailUpdateOne) ClearOrderNo() *DictDetailUpdateOne {
	dduo.mutation.ClearOrderNo()
	return dduo
}

// SetLabel sets the "label" field.
func (dduo *DictDetailUpdateOne) SetLabel(s string) *DictDetailUpdateOne {
	dduo.mutation.SetLabel(s)
	return dduo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (dduo *DictDetailUpdateOne) SetNillableLabel(s *string) *DictDetailUpdateOne {
	if s != nil {
		dduo.SetLabel(*s)
	}
	return dduo
}

// ClearLabel clears the value of the "label" field.
func (dduo *DictDetailUpdateOne) ClearLabel() *DictDetailUpdateOne {
	dduo.mutation.ClearLabel()
	return dduo
}

// SetValue sets the "value" field.
func (dduo *DictDetailUpdateOne) SetValue(s string) *DictDetailUpdateOne {
	dduo.mutation.SetValue(s)
	return dduo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (dduo *DictDetailUpdateOne) SetNillableValue(s *string) *DictDetailUpdateOne {
	if s != nil {
		dduo.SetValue(*s)
	}
	return dduo
}

// ClearValue clears the value of the "value" field.
func (dduo *DictDetailUpdateOne) ClearValue() *DictDetailUpdateOne {
	dduo.mutation.ClearValue()
	return dduo
}

// Mutation returns the DictDetailMutation object of the builder.
func (dduo *DictDetailUpdateOne) Mutation() *DictDetailMutation {
	return dduo.mutation
}

// Where appends a list predicates to the DictDetailUpdate builder.
func (dduo *DictDetailUpdateOne) Where(ps ...predicate.DictDetail) *DictDetailUpdateOne {
	dduo.mutation.Where(ps...)
	return dduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dduo *DictDetailUpdateOne) Select(field string, fields ...string) *DictDetailUpdateOne {
	dduo.fields = append([]string{field}, fields...)
	return dduo
}

// Save executes the query and returns the updated DictDetail entity.
func (dduo *DictDetailUpdateOne) Save(ctx context.Context) (*DictDetail, error) {
	return withHooks(ctx, dduo.sqlSave, dduo.mutation, dduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dduo *DictDetailUpdateOne) SaveX(ctx context.Context) *DictDetail {
	node, err := dduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dduo *DictDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := dduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dduo *DictDetailUpdateOne) ExecX(ctx context.Context) {
	if err := dduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (dduo *DictDetailUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DictDetailUpdateOne {
	dduo.modifiers = append(dduo.modifiers, modifiers...)
	return dduo
}

func (dduo *DictDetailUpdateOne) sqlSave(ctx context.Context) (_node *DictDetail, err error) {
	_spec := sqlgraph.NewUpdateSpec(dictdetail.Table, dictdetail.Columns, sqlgraph.NewFieldSpec(dictdetail.FieldID, field.TypeUint32))
	id, ok := dduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DictDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dictdetail.FieldID)
		for _, f := range fields {
			if !dictdetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dictdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if dduo.mutation.CreateTimeCleared() {
		_spec.ClearField(dictdetail.FieldCreateTime, field.TypeTime)
	}
	if value, ok := dduo.mutation.UpdateTime(); ok {
		_spec.SetField(dictdetail.FieldUpdateTime, field.TypeTime, value)
	}
	if dduo.mutation.UpdateTimeCleared() {
		_spec.ClearField(dictdetail.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := dduo.mutation.DeleteTime(); ok {
		_spec.SetField(dictdetail.FieldDeleteTime, field.TypeTime, value)
	}
	if dduo.mutation.DeleteTimeCleared() {
		_spec.ClearField(dictdetail.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := dduo.mutation.CreateBy(); ok {
		_spec.SetField(dictdetail.FieldCreateBy, field.TypeUint32, value)
	}
	if value, ok := dduo.mutation.AddedCreateBy(); ok {
		_spec.AddField(dictdetail.FieldCreateBy, field.TypeUint32, value)
	}
	if dduo.mutation.CreateByCleared() {
		_spec.ClearField(dictdetail.FieldCreateBy, field.TypeUint32)
	}
	if value, ok := dduo.mutation.DictID(); ok {
		_spec.SetField(dictdetail.FieldDictID, field.TypeUint32, value)
	}
	if value, ok := dduo.mutation.AddedDictID(); ok {
		_spec.AddField(dictdetail.FieldDictID, field.TypeUint32, value)
	}
	if dduo.mutation.DictIDCleared() {
		_spec.ClearField(dictdetail.FieldDictID, field.TypeUint32)
	}
	if value, ok := dduo.mutation.OrderNo(); ok {
		_spec.SetField(dictdetail.FieldOrderNo, field.TypeInt32, value)
	}
	if value, ok := dduo.mutation.AddedOrderNo(); ok {
		_spec.AddField(dictdetail.FieldOrderNo, field.TypeInt32, value)
	}
	if dduo.mutation.OrderNoCleared() {
		_spec.ClearField(dictdetail.FieldOrderNo, field.TypeInt32)
	}
	if value, ok := dduo.mutation.Label(); ok {
		_spec.SetField(dictdetail.FieldLabel, field.TypeString, value)
	}
	if dduo.mutation.LabelCleared() {
		_spec.ClearField(dictdetail.FieldLabel, field.TypeString)
	}
	if value, ok := dduo.mutation.Value(); ok {
		_spec.SetField(dictdetail.FieldValue, field.TypeString, value)
	}
	if dduo.mutation.ValueCleared() {
		_spec.ClearField(dictdetail.FieldValue, field.TypeString)
	}
	_spec.AddModifiers(dduo.modifiers...)
	_node = &DictDetail{config: dduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dictdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dduo.mutation.done = true
	return _node, nil
}
